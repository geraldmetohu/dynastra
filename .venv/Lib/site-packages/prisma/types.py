# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


LiteralString = str
# -- template types.py.jinja --
from typing import TypeVar

import httpx
from . import _types
from .utils import _NoneType



# TODO: filters with aggregates should have their own recursive fields
# TODO: cleanup whitespace control
# TODO: add an argument to signify that the last iteration should be skipped


SortMode = _types.SortMode
SortOrder = _types.SortOrder

MetricsFormat = _types.MetricsFormat

DatasourceOverride = _types.DatasourceOverride
HttpConfig = _types.HttpConfig


# types that can be serialized to json by our query builder
Serializable = Union[
    None,
    bool,
    float,
    int,
    str,
    datetime.datetime,
    List[Any],
    Dict[None, Any],
    Dict[bool, Any],
    Dict[float, Any],
    Dict[int, Any],
    Dict[str, Any],
]


    

StringFilter = TypedDict(
    'StringFilter',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive1'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive1 = TypedDict(
    'StringFilterRecursive1',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive2'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive2 = TypedDict(
    'StringFilterRecursive2',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive3'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive3 = TypedDict(
    'StringFilterRecursive3',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
        'not': Union[str, 'StringFilterRecursive4'],
        'mode': SortMode,
        'search': str,
    },
    total=False,
)


StringFilterRecursive4 = TypedDict(
    'StringFilterRecursive4',
    {
        'equals': str,
        'not_in': List[str],
        'lt': str,
        'lte': str,
        'gt': str,
        'gte': str,
        'contains': str,
        'startswith': str,
        'endswith': str,
        'in': List[str],
                'mode': SortMode,
        'search': str,
    },
    total=False,
)


class StringWithAggregatesFilter(StringFilter, total=False):
    _max: 'StringFilter'
    _min: 'StringFilter'
    _sum: 'StringFilter'
    _avg: 'StringFilter'
    _count: 'IntFilter'


    

DateTimeFilter = TypedDict(
    'DateTimeFilter',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive1'],
    },
    total=False,
)


DateTimeFilterRecursive1 = TypedDict(
    'DateTimeFilterRecursive1',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive2'],
    },
    total=False,
)


DateTimeFilterRecursive2 = TypedDict(
    'DateTimeFilterRecursive2',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive3'],
    },
    total=False,
)


DateTimeFilterRecursive3 = TypedDict(
    'DateTimeFilterRecursive3',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
        'not': Union[datetime.datetime, 'DateTimeFilterRecursive4'],
    },
    total=False,
)


DateTimeFilterRecursive4 = TypedDict(
    'DateTimeFilterRecursive4',
    {
        'equals': datetime.datetime,
        'not_in': List[datetime.datetime],
        'lt': datetime.datetime,
        'lte': datetime.datetime,
        'gt': datetime.datetime,
        'gte': datetime.datetime,
        'in': List[datetime.datetime],
            },
    total=False,
)


class DateTimeWithAggregatesFilter(DateTimeFilter, total=False):
    _max: 'DateTimeFilter'
    _min: 'DateTimeFilter'
    _sum: 'DateTimeFilter'
    _avg: 'DateTimeFilter'
    _count: 'IntFilter'


    

BooleanFilter = TypedDict(
    'BooleanFilter',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive1'],
    },
    total=False,
)


BooleanFilterRecursive1 = TypedDict(
    'BooleanFilterRecursive1',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive2'],
    },
    total=False,
)


BooleanFilterRecursive2 = TypedDict(
    'BooleanFilterRecursive2',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive3'],
    },
    total=False,
)


BooleanFilterRecursive3 = TypedDict(
    'BooleanFilterRecursive3',
    {
        'equals': bool,
        'not': Union[bool, 'BooleanFilterRecursive4'],
    },
    total=False,
)


BooleanFilterRecursive4 = TypedDict(
    'BooleanFilterRecursive4',
    {
        'equals': bool,
            },
    total=False,
)


class BooleanWithAggregatesFilter(BooleanFilter, total=False):
    _max: 'BooleanFilter'
    _min: 'BooleanFilter'
    _sum: 'BooleanFilter'
    _avg: 'BooleanFilter'
    _count: 'IntFilter'


    

IntFilter = TypedDict(
    'IntFilter',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive1'],
    },
    total=False,
)


IntFilterRecursive1 = TypedDict(
    'IntFilterRecursive1',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive2'],
    },
    total=False,
)


IntFilterRecursive2 = TypedDict(
    'IntFilterRecursive2',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive3'],
    },
    total=False,
)


IntFilterRecursive3 = TypedDict(
    'IntFilterRecursive3',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
        'not': Union[int, 'IntFilterRecursive4'],
    },
    total=False,
)


IntFilterRecursive4 = TypedDict(
    'IntFilterRecursive4',
    {
        'equals': int,
        'not_in': List[int],
        'lt': int,
        'lte': int,
        'gt': int,
        'gte': int,
        'in': List[int],
            },
    total=False,
)


class IntWithAggregatesFilter(IntFilter, total=False):
    _max: 'IntFilter'
    _min: 'IntFilter'
    _sum: 'IntFilter'
    _avg: 'IntFilter'
    _count: 'IntFilter'


BigIntFilter = IntFilter
BigIntWithAggregatesFilter = IntWithAggregatesFilter
    

FloatFilter = TypedDict(
    'FloatFilter',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive1'],
    },
    total=False,
)


FloatFilterRecursive1 = TypedDict(
    'FloatFilterRecursive1',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive2'],
    },
    total=False,
)


FloatFilterRecursive2 = TypedDict(
    'FloatFilterRecursive2',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive3'],
    },
    total=False,
)


FloatFilterRecursive3 = TypedDict(
    'FloatFilterRecursive3',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
        'not': Union[float, 'FloatFilterRecursive4'],
    },
    total=False,
)


FloatFilterRecursive4 = TypedDict(
    'FloatFilterRecursive4',
    {
        'equals': float,
        'not_in': List[float],
        'lt': float,
        'lte': float,
        'gt': float,
        'gte': float,
        'in': List[float],
            },
    total=False,
)


class FloatWithAggregatesFilter(FloatFilter, total=False):
    _max: 'FloatFilter'
    _min: 'FloatFilter'
    _sum: 'FloatFilter'
    _avg: 'FloatFilter'
    _count: 'IntFilter'


    

BytesFilter = TypedDict(
    'BytesFilter',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive1'],
    },
    total=False,
)


BytesFilterRecursive1 = TypedDict(
    'BytesFilterRecursive1',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive2'],
    },
    total=False,
)


BytesFilterRecursive2 = TypedDict(
    'BytesFilterRecursive2',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive3'],
    },
    total=False,
)


BytesFilterRecursive3 = TypedDict(
    'BytesFilterRecursive3',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
        'not': Union['fields.Base64', 'BytesFilterRecursive4'],
    },
    total=False,
)


BytesFilterRecursive4 = TypedDict(
    'BytesFilterRecursive4',
    {
        'equals': 'fields.Base64',
        'in': List['fields.Base64'],
        'not_in': List['fields.Base64'],
            },
    total=False,
)


class BytesWithAggregatesFilter(BytesFilter, total=False):
    _max: 'BytesFilter'
    _min: 'BytesFilter'
    _sum: 'BytesFilter'
    _avg: 'BytesFilter'
    _count: 'IntFilter'


# TODO: preview feature for improving JSON filtering
JsonFilter = TypedDict(
    'JsonFilter',
    {
        'equals': 'fields.Json',
        'not': 'fields.Json',
    },
    total=False,
)


class JsonWithAggregatesFilter(JsonFilter, total=False):
    _max: 'JsonFilter'
    _min: 'JsonFilter'
    _sum: 'JsonFilter'
    _avg: 'JsonFilter'
    _count: 'IntFilter'


    

DecimalFilter = TypedDict(
    'DecimalFilter',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive1'],
    },
    total=False,
)


DecimalFilterRecursive1 = TypedDict(
    'DecimalFilterRecursive1',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive2'],
    },
    total=False,
)


DecimalFilterRecursive2 = TypedDict(
    'DecimalFilterRecursive2',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive3'],
    },
    total=False,
)


DecimalFilterRecursive3 = TypedDict(
    'DecimalFilterRecursive3',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
        'not': Union[decimal.Decimal, 'DecimalFilterRecursive4'],
    },
    total=False,
)


DecimalFilterRecursive4 = TypedDict(
    'DecimalFilterRecursive4',
    {
        'equals': decimal.Decimal,
        'not_in': List[decimal.Decimal],
        'lt': decimal.Decimal,
        'lte': decimal.Decimal,
        'gt': decimal.Decimal,
        'gte': decimal.Decimal,
        'in': List[decimal.Decimal],
            },
    total=False,
)


class DecimalWithAggregatesFilter(StringFilter, total=False):
    _max: 'DecimalFilter'
    _min: 'DecimalFilter'
    _sum: 'DecimalFilter'
    _avg: 'DecimalFilter'
    _count: 'IntFilter'


class _FloatSetInput(TypedDict):
    set: float


class _FloatDivideInput(TypedDict):
    divide: float


class _FloatMultiplyInput(TypedDict):
    multiply: float


class _FloatIncrementInput(TypedDict):
    increment: float


class _FloatDecrementInput(TypedDict):
    decrement: float


class _IntSetInput(TypedDict):
    set: int


class _IntDivideInput(TypedDict):
    divide: int


class _IntMultiplyInput(TypedDict):
    multiply: int


class _IntIncrementInput(TypedDict):
    increment: int


class _IntDecrementInput(TypedDict):
    decrement: int


AtomicFloatInput = Union[
    _FloatSetInput,
    _FloatDivideInput,
    _FloatMultiplyInput,
    _FloatIncrementInput,
    _FloatDecrementInput,
]
AtomicIntInput = Union[
    _IntSetInput,
    _IntDivideInput,
    _IntMultiplyInput,
    _IntIncrementInput,
    _IntDecrementInput,
]
AtomicBigIntInput = AtomicIntInput

class _StringListFilterEqualsInput(TypedDict):
    equals: Optional[List[_str]]


class _StringListFilterHasInput(TypedDict):
    has: _str


class _StringListFilterHasEveryInput(TypedDict):
    has_every: List[_str]


class _StringListFilterHasSomeInput(TypedDict):
    has_some: List[_str]


class _StringListFilterIsEmptyInput(TypedDict):
    is_empty: bool


StringListFilter = Union[
    _StringListFilterHasInput,
    _StringListFilterEqualsInput,
    _StringListFilterHasSomeInput,
    _StringListFilterIsEmptyInput,
    _StringListFilterHasEveryInput,
]


class _StringListUpdateSet(TypedDict):
    set: List[_str]


class _StringListUpdatePush(TypedDict):
    push: List[_str]


StringListUpdate = Union[
    List[_str],
    _StringListUpdateSet,
    _StringListUpdatePush,
]

class _BytesListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Base64']]


class _BytesListFilterHasInput(TypedDict):
    has: 'fields.Base64'


class _BytesListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Base64']


class _BytesListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Base64']


class _BytesListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BytesListFilter = Union[
    _BytesListFilterHasInput,
    _BytesListFilterEqualsInput,
    _BytesListFilterHasSomeInput,
    _BytesListFilterIsEmptyInput,
    _BytesListFilterHasEveryInput,
]


class _BytesListUpdateSet(TypedDict):
    set: List['fields.Base64']


class _BytesListUpdatePush(TypedDict):
    push: List['fields.Base64']


BytesListUpdate = Union[
    List['fields.Base64'],
    _BytesListUpdateSet,
    _BytesListUpdatePush,
]

class _DateTimeListFilterEqualsInput(TypedDict):
    equals: Optional[List[datetime.datetime]]


class _DateTimeListFilterHasInput(TypedDict):
    has: datetime.datetime


class _DateTimeListFilterHasEveryInput(TypedDict):
    has_every: List[datetime.datetime]


class _DateTimeListFilterHasSomeInput(TypedDict):
    has_some: List[datetime.datetime]


class _DateTimeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DateTimeListFilter = Union[
    _DateTimeListFilterHasInput,
    _DateTimeListFilterEqualsInput,
    _DateTimeListFilterHasSomeInput,
    _DateTimeListFilterIsEmptyInput,
    _DateTimeListFilterHasEveryInput,
]


class _DateTimeListUpdateSet(TypedDict):
    set: List[datetime.datetime]


class _DateTimeListUpdatePush(TypedDict):
    push: List[datetime.datetime]


DateTimeListUpdate = Union[
    List[datetime.datetime],
    _DateTimeListUpdateSet,
    _DateTimeListUpdatePush,
]

class _BooleanListFilterEqualsInput(TypedDict):
    equals: Optional[List[_bool]]


class _BooleanListFilterHasInput(TypedDict):
    has: _bool


class _BooleanListFilterHasEveryInput(TypedDict):
    has_every: List[_bool]


class _BooleanListFilterHasSomeInput(TypedDict):
    has_some: List[_bool]


class _BooleanListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BooleanListFilter = Union[
    _BooleanListFilterHasInput,
    _BooleanListFilterEqualsInput,
    _BooleanListFilterHasSomeInput,
    _BooleanListFilterIsEmptyInput,
    _BooleanListFilterHasEveryInput,
]


class _BooleanListUpdateSet(TypedDict):
    set: List[_bool]


class _BooleanListUpdatePush(TypedDict):
    push: List[_bool]


BooleanListUpdate = Union[
    List[_bool],
    _BooleanListUpdateSet,
    _BooleanListUpdatePush,
]

class _IntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _IntListFilterHasInput(TypedDict):
    has: _int


class _IntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _IntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _IntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


IntListFilter = Union[
    _IntListFilterHasInput,
    _IntListFilterEqualsInput,
    _IntListFilterHasSomeInput,
    _IntListFilterIsEmptyInput,
    _IntListFilterHasEveryInput,
]


class _IntListUpdateSet(TypedDict):
    set: List[_int]


class _IntListUpdatePush(TypedDict):
    push: List[_int]


IntListUpdate = Union[
    List[_int],
    _IntListUpdateSet,
    _IntListUpdatePush,
]

class _BigIntListFilterEqualsInput(TypedDict):
    equals: Optional[List[_int]]


class _BigIntListFilterHasInput(TypedDict):
    has: _int


class _BigIntListFilterHasEveryInput(TypedDict):
    has_every: List[_int]


class _BigIntListFilterHasSomeInput(TypedDict):
    has_some: List[_int]


class _BigIntListFilterIsEmptyInput(TypedDict):
    is_empty: bool


BigIntListFilter = Union[
    _BigIntListFilterHasInput,
    _BigIntListFilterEqualsInput,
    _BigIntListFilterHasSomeInput,
    _BigIntListFilterIsEmptyInput,
    _BigIntListFilterHasEveryInput,
]


class _BigIntListUpdateSet(TypedDict):
    set: List[_int]


class _BigIntListUpdatePush(TypedDict):
    push: List[_int]


BigIntListUpdate = Union[
    List[_int],
    _BigIntListUpdateSet,
    _BigIntListUpdatePush,
]

class _FloatListFilterEqualsInput(TypedDict):
    equals: Optional[List[_float]]


class _FloatListFilterHasInput(TypedDict):
    has: _float


class _FloatListFilterHasEveryInput(TypedDict):
    has_every: List[_float]


class _FloatListFilterHasSomeInput(TypedDict):
    has_some: List[_float]


class _FloatListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FloatListFilter = Union[
    _FloatListFilterHasInput,
    _FloatListFilterEqualsInput,
    _FloatListFilterHasSomeInput,
    _FloatListFilterIsEmptyInput,
    _FloatListFilterHasEveryInput,
]


class _FloatListUpdateSet(TypedDict):
    set: List[_float]


class _FloatListUpdatePush(TypedDict):
    push: List[_float]


FloatListUpdate = Union[
    List[_float],
    _FloatListUpdateSet,
    _FloatListUpdatePush,
]

class _JsonListFilterEqualsInput(TypedDict):
    equals: Optional[List['fields.Json']]


class _JsonListFilterHasInput(TypedDict):
    has: 'fields.Json'


class _JsonListFilterHasEveryInput(TypedDict):
    has_every: List['fields.Json']


class _JsonListFilterHasSomeInput(TypedDict):
    has_some: List['fields.Json']


class _JsonListFilterIsEmptyInput(TypedDict):
    is_empty: bool


JsonListFilter = Union[
    _JsonListFilterHasInput,
    _JsonListFilterEqualsInput,
    _JsonListFilterHasSomeInput,
    _JsonListFilterIsEmptyInput,
    _JsonListFilterHasEveryInput,
]


class _JsonListUpdateSet(TypedDict):
    set: List['fields.Json']


class _JsonListUpdatePush(TypedDict):
    push: List['fields.Json']


JsonListUpdate = Union[
    List['fields.Json'],
    _JsonListUpdateSet,
    _JsonListUpdatePush,
]

class _DecimalListFilterEqualsInput(TypedDict):
    equals: Optional[List[decimal.Decimal]]


class _DecimalListFilterHasInput(TypedDict):
    has: decimal.Decimal


class _DecimalListFilterHasEveryInput(TypedDict):
    has_every: List[decimal.Decimal]


class _DecimalListFilterHasSomeInput(TypedDict):
    has_some: List[decimal.Decimal]


class _DecimalListFilterIsEmptyInput(TypedDict):
    is_empty: bool


DecimalListFilter = Union[
    _DecimalListFilterHasInput,
    _DecimalListFilterEqualsInput,
    _DecimalListFilterHasSomeInput,
    _DecimalListFilterIsEmptyInput,
    _DecimalListFilterHasEveryInput,
]


class _DecimalListUpdateSet(TypedDict):
    set: List[decimal.Decimal]


class _DecimalListUpdatePush(TypedDict):
    push: List[decimal.Decimal]


DecimalListUpdate = Union[
    List[decimal.Decimal],
    _DecimalListUpdateSet,
    _DecimalListUpdatePush,
]

class _RoleListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.Role']]


class _RoleListFilterHasInput(TypedDict):
    has: 'enums.Role'


class _RoleListFilterHasEveryInput(TypedDict):
    has_every: List['enums.Role']


class _RoleListFilterHasSomeInput(TypedDict):
    has_some: List['enums.Role']


class _RoleListFilterIsEmptyInput(TypedDict):
    is_empty: bool


RoleListFilter = Union[
    _RoleListFilterHasInput,
    _RoleListFilterEqualsInput,
    _RoleListFilterHasSomeInput,
    _RoleListFilterIsEmptyInput,
    _RoleListFilterHasEveryInput,
]


class _RoleListUpdateSet(TypedDict):
    set: List['enums.Role']


class _RoleListUpdatePush(TypedDict):
    push: List['enums.Role']


RoleListUpdate = Union[
    List['enums.Role'],
    _RoleListUpdateSet,
    _RoleListUpdatePush,
]

class _InvoiceTypeListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.InvoiceType']]


class _InvoiceTypeListFilterHasInput(TypedDict):
    has: 'enums.InvoiceType'


class _InvoiceTypeListFilterHasEveryInput(TypedDict):
    has_every: List['enums.InvoiceType']


class _InvoiceTypeListFilterHasSomeInput(TypedDict):
    has_some: List['enums.InvoiceType']


class _InvoiceTypeListFilterIsEmptyInput(TypedDict):
    is_empty: bool


InvoiceTypeListFilter = Union[
    _InvoiceTypeListFilterHasInput,
    _InvoiceTypeListFilterEqualsInput,
    _InvoiceTypeListFilterHasSomeInput,
    _InvoiceTypeListFilterIsEmptyInput,
    _InvoiceTypeListFilterHasEveryInput,
]


class _InvoiceTypeListUpdateSet(TypedDict):
    set: List['enums.InvoiceType']


class _InvoiceTypeListUpdatePush(TypedDict):
    push: List['enums.InvoiceType']


InvoiceTypeListUpdate = Union[
    List['enums.InvoiceType'],
    _InvoiceTypeListUpdateSet,
    _InvoiceTypeListUpdatePush,
]

class _InvoiceStatusListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.InvoiceStatus']]


class _InvoiceStatusListFilterHasInput(TypedDict):
    has: 'enums.InvoiceStatus'


class _InvoiceStatusListFilterHasEveryInput(TypedDict):
    has_every: List['enums.InvoiceStatus']


class _InvoiceStatusListFilterHasSomeInput(TypedDict):
    has_some: List['enums.InvoiceStatus']


class _InvoiceStatusListFilterIsEmptyInput(TypedDict):
    is_empty: bool


InvoiceStatusListFilter = Union[
    _InvoiceStatusListFilterHasInput,
    _InvoiceStatusListFilterEqualsInput,
    _InvoiceStatusListFilterHasSomeInput,
    _InvoiceStatusListFilterIsEmptyInput,
    _InvoiceStatusListFilterHasEveryInput,
]


class _InvoiceStatusListUpdateSet(TypedDict):
    set: List['enums.InvoiceStatus']


class _InvoiceStatusListUpdatePush(TypedDict):
    push: List['enums.InvoiceStatus']


InvoiceStatusListUpdate = Union[
    List['enums.InvoiceStatus'],
    _InvoiceStatusListUpdateSet,
    _InvoiceStatusListUpdatePush,
]

class _FrequencyListFilterEqualsInput(TypedDict):
    equals: Optional[List['enums.Frequency']]


class _FrequencyListFilterHasInput(TypedDict):
    has: 'enums.Frequency'


class _FrequencyListFilterHasEveryInput(TypedDict):
    has_every: List['enums.Frequency']


class _FrequencyListFilterHasSomeInput(TypedDict):
    has_some: List['enums.Frequency']


class _FrequencyListFilterIsEmptyInput(TypedDict):
    is_empty: bool


FrequencyListFilter = Union[
    _FrequencyListFilterHasInput,
    _FrequencyListFilterEqualsInput,
    _FrequencyListFilterHasSomeInput,
    _FrequencyListFilterIsEmptyInput,
    _FrequencyListFilterHasEveryInput,
]


class _FrequencyListUpdateSet(TypedDict):
    set: List['enums.Frequency']


class _FrequencyListUpdatePush(TypedDict):
    push: List['enums.Frequency']


FrequencyListUpdate = Union[
    List['enums.Frequency'],
    _FrequencyListUpdateSet,
    _FrequencyListUpdatePush,
]


# User types

class UserOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the User create method"""
    id: _str
    role: 'enums.Role'
    address: Optional[_str]
    dateOfBirth: Optional[datetime.datetime]
    placeOfBirth: Optional[_str]
    sex: Optional[_str]
    clientType: Optional[_str]
    tasks: List[_str]
    status: Optional[_str]
    description: Optional[_str]
    createdAt: datetime.datetime
    invoices: 'InvoiceCreateManyNestedWithoutRelationsInput'


class UserCreateInput(UserOptionalCreateInput):
    """Required arguments to the User create method"""
    name: _str
    surname: _str
    phone: _str
    email: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class UserOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the User create method, without relations"""
    id: _str
    role: 'enums.Role'
    address: Optional[_str]
    dateOfBirth: Optional[datetime.datetime]
    placeOfBirth: Optional[_str]
    sex: Optional[_str]
    clientType: Optional[_str]
    tasks: List[_str]
    status: Optional[_str]
    description: Optional[_str]
    createdAt: datetime.datetime


class UserCreateWithoutRelationsInput(UserOptionalCreateWithoutRelationsInput):
    """Required arguments to the User create method, without relations"""
    name: _str
    surname: _str
    phone: _str
    email: _str

class UserConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'UserCreateWithoutRelationsInput'
    where: 'UserWhereUniqueInput'

class UserCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'


class UserCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['UserCreateWithoutRelationsInput', List['UserCreateWithoutRelationsInput']]
    connect: Union['UserWhereUniqueInput', List['UserWhereUniqueInput']]
    connect_or_create: Union['UserConnectOrCreateWithoutRelationsInput', List['UserConnectOrCreateWithoutRelationsInput']]

_UserWhereUnique_id_Input = TypedDict(
    '_UserWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_UserWhereUnique_email_Input = TypedDict(
    '_UserWhereUnique_email_Input',
    {
        'email': '_str',
    },
    total=True
)

UserWhereUniqueInput = Union[
    '_UserWhereUnique_id_Input',
    '_UserWhereUnique_email_Input',
]


class UserUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    role: 'enums.Role'
    name: _str
    surname: _str
    phone: _str
    email: _str
    address: Optional[_str]
    dateOfBirth: Optional[datetime.datetime]
    placeOfBirth: Optional[_str]
    sex: Optional[_str]
    clientType: Optional[_str]
    tasks: 'types.StringListUpdate'
    status: Optional[_str]
    description: Optional[_str]
    createdAt: datetime.datetime
    invoices: 'InvoiceUpdateManyWithoutRelationsInput'


class UserUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    role: 'enums.Role'
    name: _str
    surname: _str
    phone: _str
    email: _str
    address: Optional[_str]
    dateOfBirth: Optional[datetime.datetime]
    placeOfBirth: Optional[_str]
    sex: Optional[_str]
    clientType: Optional[_str]
    tasks: 'types.StringListUpdate'
    status: Optional[_str]
    description: Optional[_str]
    createdAt: datetime.datetime


class UserUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['UserCreateWithoutRelationsInput']
    connect: List['UserWhereUniqueInput']
    connect_or_create: List['UserConnectOrCreateWithoutRelationsInput']
    set: List['UserWhereUniqueInput']
    disconnect: List['UserWhereUniqueInput']
    delete: List['UserWhereUniqueInput']

    # TODO
    # update: List['UserUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['UserUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['UserScalarWhereInput']
    # upsert: List['UserUpserteWithWhereUniqueWithoutRelationsInput']


class UserUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'UserCreateWithoutRelationsInput'
    connect: 'UserWhereUniqueInput'
    connect_or_create: 'UserConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'UserUpdateInput'
    # upsert: 'UserUpsertWithoutRelationsInput'


class UserUpsertInput(TypedDict):
    create: 'UserCreateInput'
    update: 'UserUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_User_id_OrderByInput = TypedDict(
    '_User_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_User_role_OrderByInput = TypedDict(
    '_User_role_OrderByInput',
    {
        'role': 'SortOrder',
    },
    total=True
)

_User_name_OrderByInput = TypedDict(
    '_User_name_OrderByInput',
    {
        'name': 'SortOrder',
    },
    total=True
)

_User_surname_OrderByInput = TypedDict(
    '_User_surname_OrderByInput',
    {
        'surname': 'SortOrder',
    },
    total=True
)

_User_phone_OrderByInput = TypedDict(
    '_User_phone_OrderByInput',
    {
        'phone': 'SortOrder',
    },
    total=True
)

_User_email_OrderByInput = TypedDict(
    '_User_email_OrderByInput',
    {
        'email': 'SortOrder',
    },
    total=True
)

_User_address_OrderByInput = TypedDict(
    '_User_address_OrderByInput',
    {
        'address': 'SortOrder',
    },
    total=True
)

_User_dateOfBirth_OrderByInput = TypedDict(
    '_User_dateOfBirth_OrderByInput',
    {
        'dateOfBirth': 'SortOrder',
    },
    total=True
)

_User_placeOfBirth_OrderByInput = TypedDict(
    '_User_placeOfBirth_OrderByInput',
    {
        'placeOfBirth': 'SortOrder',
    },
    total=True
)

_User_sex_OrderByInput = TypedDict(
    '_User_sex_OrderByInput',
    {
        'sex': 'SortOrder',
    },
    total=True
)

_User_clientType_OrderByInput = TypedDict(
    '_User_clientType_OrderByInput',
    {
        'clientType': 'SortOrder',
    },
    total=True
)

_User_tasks_OrderByInput = TypedDict(
    '_User_tasks_OrderByInput',
    {
        'tasks': 'SortOrder',
    },
    total=True
)

_User_status_OrderByInput = TypedDict(
    '_User_status_OrderByInput',
    {
        'status': 'SortOrder',
    },
    total=True
)

_User_description_OrderByInput = TypedDict(
    '_User_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_User_createdAt_OrderByInput = TypedDict(
    '_User_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_User_RelevanceInner = TypedDict(
    '_User_RelevanceInner',
    {
        'fields': 'List[UserScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_User_RelevanceOrderByInput = TypedDict(
    '_User_RelevanceOrderByInput',
    {
        '_relevance': '_User_RelevanceInner',
    },
    total=True
)

UserOrderByInput = Union[
    '_User_id_OrderByInput',
    '_User_role_OrderByInput',
    '_User_name_OrderByInput',
    '_User_surname_OrderByInput',
    '_User_phone_OrderByInput',
    '_User_email_OrderByInput',
    '_User_address_OrderByInput',
    '_User_dateOfBirth_OrderByInput',
    '_User_placeOfBirth_OrderByInput',
    '_User_sex_OrderByInput',
    '_User_clientType_OrderByInput',
    '_User_tasks_OrderByInput',
    '_User_status_OrderByInput',
    '_User_description_OrderByInput',
    '_User_createdAt_OrderByInput',
    '_User_RelevanceOrderByInput',
]



# recursive User types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

UserRelationFilter = TypedDict(
    'UserRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class UserListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class UserInclude(TypedDict, total=False):
    """User relational arguments"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromUser']


    

class UserIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromUserRecursive1']


class UserIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromUserRecursive2']


class UserIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromUserRecursive3']


class UserIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromUserRecursive4']


class UserIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class UserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyUserArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class InvoiceIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    client: Union[bool, 'UserArgsFromUserRecursive1']
    recurring: Union[bool, 'RecurringInvoiceArgsFromUserRecursive1']
    services: Union[bool, 'FindManyServiceArgsFromUserRecursive1']


class InvoiceIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    client: Union[bool, 'UserArgsFromUserRecursive2']
    recurring: Union[bool, 'RecurringInvoiceArgsFromUserRecursive2']
    services: Union[bool, 'FindManyServiceArgsFromUserRecursive2']


class InvoiceIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    client: Union[bool, 'UserArgsFromUserRecursive3']
    recurring: Union[bool, 'RecurringInvoiceArgsFromUserRecursive3']
    services: Union[bool, 'FindManyServiceArgsFromUserRecursive3']


class InvoiceIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    client: Union[bool, 'UserArgsFromUserRecursive4']
    recurring: Union[bool, 'RecurringInvoiceArgsFromUserRecursive4']
    services: Union[bool, 'FindManyServiceArgsFromUserRecursive4']


class InvoiceIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class InvoiceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'InvoiceIncludeFromInvoiceRecursive1'


class InvoiceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'InvoiceIncludeFromInvoiceRecursive2'


class InvoiceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'InvoiceIncludeFromInvoiceRecursive3'


class InvoiceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'InvoiceIncludeFromInvoiceRecursive4'


class InvoiceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyInvoiceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive1'


class FindManyInvoiceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive2'


class FindManyInvoiceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive3'


class FindManyInvoiceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive4'


class FindManyInvoiceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    
    

class ServiceIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    invoice: Union[bool, 'InvoiceArgsFromUserRecursive1']


class ServiceIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    invoice: Union[bool, 'InvoiceArgsFromUserRecursive2']


class ServiceIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    invoice: Union[bool, 'InvoiceArgsFromUserRecursive3']


class ServiceIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    invoice: Union[bool, 'InvoiceArgsFromUserRecursive4']


class ServiceIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class ServiceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyServiceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class RecurringInvoiceIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    invoice: Union[bool, 'InvoiceArgsFromUserRecursive1']


class RecurringInvoiceIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    invoice: Union[bool, 'InvoiceArgsFromUserRecursive2']


class RecurringInvoiceIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    invoice: Union[bool, 'InvoiceArgsFromUserRecursive3']


class RecurringInvoiceIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    invoice: Union[bool, 'InvoiceArgsFromUserRecursive4']


class RecurringInvoiceIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class RecurringInvoiceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive1'


class RecurringInvoiceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive2'


class RecurringInvoiceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive3'


class RecurringInvoiceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive4'


class RecurringInvoiceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyRecurringInvoiceArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive1'


class FindManyRecurringInvoiceArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive2'


class FindManyRecurringInvoiceArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive3'


class FindManyRecurringInvoiceArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive4'


class FindManyRecurringInvoiceArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    
    

class MessageIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromUserRecursive1']


class MessageIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromUserRecursive2']


class MessageIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromUserRecursive3']


class MessageIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromUserRecursive4']


class MessageIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class MessageArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyMessageArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class RepeatRuleIncludeFromUser(TypedDict, total=False):
    """Relational arguments for User"""
    message: Union[bool, 'MessageArgsFromUserRecursive1']


class RepeatRuleIncludeFromUserRecursive1(TypedDict, total=False):
    """Relational arguments for User"""
    message: Union[bool, 'MessageArgsFromUserRecursive2']


class RepeatRuleIncludeFromUserRecursive2(TypedDict, total=False):
    """Relational arguments for User"""
    message: Union[bool, 'MessageArgsFromUserRecursive3']


class RepeatRuleIncludeFromUserRecursive3(TypedDict, total=False):
    """Relational arguments for User"""
    message: Union[bool, 'MessageArgsFromUserRecursive4']


class RepeatRuleIncludeFromUserRecursive4(TypedDict, total=False):
    """Relational arguments for User"""

    

class RepeatRuleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive1'


class RepeatRuleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive2'


class RepeatRuleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive3'


class RepeatRuleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive4'


class RepeatRuleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    
    

class FindManyRepeatRuleArgsFromUser(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive1'


class FindManyRepeatRuleArgsFromUserRecursive1(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive2'


class FindManyRepeatRuleArgsFromUserRecursive2(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive3'


class FindManyRepeatRuleArgsFromUserRecursive3(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive4'


class FindManyRepeatRuleArgsFromUserRecursive4(TypedDict, total=False):
    """Arguments for User"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    


FindManyUserArgs = FindManyUserArgsFromUser
FindFirstUserArgs = FindManyUserArgsFromUser


    

class UserWhereInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    name: Union[_str, 'types.StringFilter']
    surname: Union[_str, 'types.StringFilter']
    phone: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    dateOfBirth: Union[None, datetime.datetime, 'types.DateTimeFilter']
    placeOfBirth: Union[None, _str, 'types.StringFilter']
    sex: Union[None, _str, 'types.StringFilter']
    clientType: Union[None, _str, 'types.StringFilter']
    tasks: 'types.StringListFilter'
    status: Union[None, _str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    invoices: 'InvoiceListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive1', List['UserWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive1']
    OR: List['UserWhereInputRecursive1']
    NOT: List['UserWhereInputRecursive1']


class UserWhereInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    name: Union[_str, 'types.StringFilter']
    surname: Union[_str, 'types.StringFilter']
    phone: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    dateOfBirth: Union[None, datetime.datetime, 'types.DateTimeFilter']
    placeOfBirth: Union[None, _str, 'types.StringFilter']
    sex: Union[None, _str, 'types.StringFilter']
    clientType: Union[None, _str, 'types.StringFilter']
    tasks: 'types.StringListFilter'
    status: Union[None, _str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    invoices: 'InvoiceListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive2', List['UserWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive2']
    OR: List['UserWhereInputRecursive2']
    NOT: List['UserWhereInputRecursive2']


class UserWhereInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    name: Union[_str, 'types.StringFilter']
    surname: Union[_str, 'types.StringFilter']
    phone: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    dateOfBirth: Union[None, datetime.datetime, 'types.DateTimeFilter']
    placeOfBirth: Union[None, _str, 'types.StringFilter']
    sex: Union[None, _str, 'types.StringFilter']
    clientType: Union[None, _str, 'types.StringFilter']
    tasks: 'types.StringListFilter'
    status: Union[None, _str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    invoices: 'InvoiceListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive3', List['UserWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive3']
    OR: List['UserWhereInputRecursive3']
    NOT: List['UserWhereInputRecursive3']


class UserWhereInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    name: Union[_str, 'types.StringFilter']
    surname: Union[_str, 'types.StringFilter']
    phone: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    dateOfBirth: Union[None, datetime.datetime, 'types.DateTimeFilter']
    placeOfBirth: Union[None, _str, 'types.StringFilter']
    sex: Union[None, _str, 'types.StringFilter']
    clientType: Union[None, _str, 'types.StringFilter']
    tasks: 'types.StringListFilter'
    status: Union[None, _str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    invoices: 'InvoiceListRelationFilter'

    # should be noted that AND and NOT should be Union['UserWhereInputRecursive4', List['UserWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['UserWhereInputRecursive4']
    OR: List['UserWhereInputRecursive4']
    NOT: List['UserWhereInputRecursive4']


class UserWhereInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    role: 'enums.Role'
    name: Union[_str, 'types.StringFilter']
    surname: Union[_str, 'types.StringFilter']
    phone: Union[_str, 'types.StringFilter']
    email: Union[_str, 'types.StringFilter']
    address: Union[None, _str, 'types.StringFilter']
    dateOfBirth: Union[None, datetime.datetime, 'types.DateTimeFilter']
    placeOfBirth: Union[None, _str, 'types.StringFilter']
    sex: Union[None, _str, 'types.StringFilter']
    clientType: Union[None, _str, 'types.StringFilter']
    tasks: 'types.StringListFilter'
    status: Union[None, _str, 'types.StringFilter']
    description: Union[None, _str, 'types.StringFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    invoices: 'InvoiceListRelationFilter'



# aggregate User types


    

class UserScalarWhereWithAggregatesInput(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    name: Union[_str, 'types.StringWithAggregatesFilter']
    surname: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    dateOfBirth: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    placeOfBirth: Union[_str, 'types.StringWithAggregatesFilter']
    sex: Union[_str, 'types.StringWithAggregatesFilter']
    clientType: Union[_str, 'types.StringWithAggregatesFilter']
    tasks: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive1']
    OR: List['UserScalarWhereWithAggregatesInputRecursive1']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive1']


class UserScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    name: Union[_str, 'types.StringWithAggregatesFilter']
    surname: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    dateOfBirth: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    placeOfBirth: Union[_str, 'types.StringWithAggregatesFilter']
    sex: Union[_str, 'types.StringWithAggregatesFilter']
    clientType: Union[_str, 'types.StringWithAggregatesFilter']
    tasks: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive2']
    OR: List['UserScalarWhereWithAggregatesInputRecursive2']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive2']


class UserScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    name: Union[_str, 'types.StringWithAggregatesFilter']
    surname: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    dateOfBirth: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    placeOfBirth: Union[_str, 'types.StringWithAggregatesFilter']
    sex: Union[_str, 'types.StringWithAggregatesFilter']
    clientType: Union[_str, 'types.StringWithAggregatesFilter']
    tasks: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive3']
    OR: List['UserScalarWhereWithAggregatesInputRecursive3']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive3']


class UserScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    name: Union[_str, 'types.StringWithAggregatesFilter']
    surname: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    dateOfBirth: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    placeOfBirth: Union[_str, 'types.StringWithAggregatesFilter']
    sex: Union[_str, 'types.StringWithAggregatesFilter']
    clientType: Union[_str, 'types.StringWithAggregatesFilter']
    tasks: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['UserScalarWhereWithAggregatesInputRecursive4']
    OR: List['UserScalarWhereWithAggregatesInputRecursive4']
    NOT: List['UserScalarWhereWithAggregatesInputRecursive4']


class UserScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """User arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    role: 'enums.Role'
    name: Union[_str, 'types.StringWithAggregatesFilter']
    surname: Union[_str, 'types.StringWithAggregatesFilter']
    phone: Union[_str, 'types.StringWithAggregatesFilter']
    email: Union[_str, 'types.StringWithAggregatesFilter']
    address: Union[_str, 'types.StringWithAggregatesFilter']
    dateOfBirth: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    placeOfBirth: Union[_str, 'types.StringWithAggregatesFilter']
    sex: Union[_str, 'types.StringWithAggregatesFilter']
    clientType: Union[_str, 'types.StringWithAggregatesFilter']
    tasks: Union[_str, 'types.StringWithAggregatesFilter']
    status: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class UserGroupByOutput(TypedDict, total=False):
    id: _str
    role: 'enums.Role'
    name: _str
    surname: _str
    phone: _str
    email: _str
    address: _str
    dateOfBirth: datetime.datetime
    placeOfBirth: _str
    sex: _str
    clientType: _str
    tasks: List[_str]
    status: _str
    description: _str
    createdAt: datetime.datetime
    _sum: 'UserSumAggregateOutput'
    _avg: 'UserAvgAggregateOutput'
    _min: 'UserMinAggregateOutput'
    _max: 'UserMaxAggregateOutput'
    _count: 'UserCountAggregateOutput'


class UserAvgAggregateOutput(TypedDict, total=False):
    """User output for aggregating averages"""


class UserSumAggregateOutput(TypedDict, total=False):
    """User output for aggregating sums"""


class UserScalarAggregateOutput(TypedDict, total=False):
    """User output including scalar fields"""
    id: _str
    role: 'enums.Role'
    name: _str
    surname: _str
    phone: _str
    email: _str
    address: _str
    dateOfBirth: datetime.datetime
    placeOfBirth: _str
    sex: _str
    clientType: _str
    tasks: List[_str]
    status: _str
    description: _str
    createdAt: datetime.datetime


UserMinAggregateOutput = UserScalarAggregateOutput
UserMaxAggregateOutput = UserScalarAggregateOutput


class UserMaxAggregateInput(TypedDict, total=False):
    """User input for aggregating by max"""
    id: bool
    role: bool
    name: bool
    surname: bool
    phone: bool
    email: bool
    address: bool
    dateOfBirth: bool
    placeOfBirth: bool
    sex: bool
    clientType: bool
    tasks: bool
    status: bool
    description: bool
    createdAt: bool


class UserMinAggregateInput(TypedDict, total=False):
    """User input for aggregating by min"""
    id: bool
    role: bool
    name: bool
    surname: bool
    phone: bool
    email: bool
    address: bool
    dateOfBirth: bool
    placeOfBirth: bool
    sex: bool
    clientType: bool
    tasks: bool
    status: bool
    description: bool
    createdAt: bool


class UserNumberAggregateInput(TypedDict, total=False):
    """User input for aggregating numbers"""


UserAvgAggregateInput = UserNumberAggregateInput
UserSumAggregateInput = UserNumberAggregateInput


UserCountAggregateInput = TypedDict(
    'UserCountAggregateInput',
    {
        'id': bool,
        'role': bool,
        'name': bool,
        'surname': bool,
        'phone': bool,
        'email': bool,
        'address': bool,
        'dateOfBirth': bool,
        'placeOfBirth': bool,
        'sex': bool,
        'clientType': bool,
        'tasks': bool,
        'status': bool,
        'description': bool,
        'createdAt': bool,
        '_all': bool,
    },
    total=False,
)

UserCountAggregateOutput = TypedDict(
    'UserCountAggregateOutput',
    {
        'id': int,
        'role': int,
        'name': int,
        'surname': int,
        'phone': int,
        'email': int,
        'address': int,
        'dateOfBirth': int,
        'placeOfBirth': int,
        'sex': int,
        'clientType': int,
        'tasks': int,
        'status': int,
        'description': int,
        'createdAt': int,
        '_all': int,
    },
    total=False,
)


UserKeys = Literal[
    'id',
    'role',
    'name',
    'surname',
    'phone',
    'email',
    'address',
    'dateOfBirth',
    'placeOfBirth',
    'sex',
    'clientType',
    'tasks',
    'status',
    'description',
    'createdAt',
    'invoices',
]
UserScalarFieldKeys = Literal[
    'id',
    'role',
    'name',
    'surname',
    'phone',
    'email',
    'address',
    'dateOfBirth',
    'placeOfBirth',
    'sex',
    'clientType',
    'tasks',
    'status',
    'description',
    'createdAt',
]
UserScalarFieldKeysT = TypeVar('UserScalarFieldKeysT', bound=UserScalarFieldKeys)

UserRelationalFieldKeys = Literal[
        'invoices',
    ]

# Invoice types

class InvoiceOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Invoice create method"""
    id: _str
    clientId: _str
    client: 'UserCreateNestedWithoutRelationsInput'
    recurring: 'RecurringInvoiceCreateNestedWithoutRelationsInput'
    services: 'ServiceCreateManyNestedWithoutRelationsInput'
    iban: Optional[_str]
    logoPath: Optional[_str]
    pdfPath: Optional[_str]
    sent: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class InvoiceCreateInput(InvoiceOptionalCreateInput):
    """Required arguments to the Invoice create method"""
    invoiceType: _str
    invoiceDate: datetime.datetime
    dueDate: datetime.datetime
    total: _float
    accountName: _str
    sortCode: _str
    accountNumber: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class InvoiceOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Invoice create method, without relations"""
    id: _str
    clientId: _str
    iban: Optional[_str]
    logoPath: Optional[_str]
    pdfPath: Optional[_str]
    sent: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class InvoiceCreateWithoutRelationsInput(InvoiceOptionalCreateWithoutRelationsInput):
    """Required arguments to the Invoice create method, without relations"""
    invoiceType: _str
    invoiceDate: datetime.datetime
    dueDate: datetime.datetime
    total: _float
    accountName: _str
    sortCode: _str
    accountNumber: _str

class InvoiceConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'InvoiceCreateWithoutRelationsInput'
    where: 'InvoiceWhereUniqueInput'

class InvoiceCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'InvoiceCreateWithoutRelationsInput'
    connect: 'InvoiceWhereUniqueInput'
    connect_or_create: 'InvoiceConnectOrCreateWithoutRelationsInput'


class InvoiceCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['InvoiceCreateWithoutRelationsInput', List['InvoiceCreateWithoutRelationsInput']]
    connect: Union['InvoiceWhereUniqueInput', List['InvoiceWhereUniqueInput']]
    connect_or_create: Union['InvoiceConnectOrCreateWithoutRelationsInput', List['InvoiceConnectOrCreateWithoutRelationsInput']]

_InvoiceWhereUnique_id_Input = TypedDict(
    '_InvoiceWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

InvoiceWhereUniqueInput = _InvoiceWhereUnique_id_Input


class InvoiceUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    client: 'UserUpdateOneWithoutRelationsInput'
    recurring: 'RecurringInvoiceUpdateOneWithoutRelationsInput'
    invoiceType: _str
    invoiceDate: datetime.datetime
    dueDate: datetime.datetime
    total: Union[AtomicFloatInput, _float]
    services: 'ServiceUpdateManyWithoutRelationsInput'
    accountName: _str
    sortCode: _str
    accountNumber: _str
    iban: Optional[_str]
    logoPath: Optional[_str]
    pdfPath: Optional[_str]
    sent: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class InvoiceUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    invoiceType: _str
    invoiceDate: datetime.datetime
    dueDate: datetime.datetime
    total: Union[AtomicFloatInput, _float]
    accountName: _str
    sortCode: _str
    accountNumber: _str
    iban: Optional[_str]
    logoPath: Optional[_str]
    pdfPath: Optional[_str]
    sent: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


class InvoiceUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['InvoiceCreateWithoutRelationsInput']
    connect: List['InvoiceWhereUniqueInput']
    connect_or_create: List['InvoiceConnectOrCreateWithoutRelationsInput']
    set: List['InvoiceWhereUniqueInput']
    disconnect: List['InvoiceWhereUniqueInput']
    delete: List['InvoiceWhereUniqueInput']

    # TODO
    # update: List['InvoiceUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['InvoiceUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['InvoiceScalarWhereInput']
    # upsert: List['InvoiceUpserteWithWhereUniqueWithoutRelationsInput']


class InvoiceUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'InvoiceCreateWithoutRelationsInput'
    connect: 'InvoiceWhereUniqueInput'
    connect_or_create: 'InvoiceConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'InvoiceUpdateInput'
    # upsert: 'InvoiceUpsertWithoutRelationsInput'


class InvoiceUpsertInput(TypedDict):
    create: 'InvoiceCreateInput'
    update: 'InvoiceUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Invoice_id_OrderByInput = TypedDict(
    '_Invoice_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Invoice_clientId_OrderByInput = TypedDict(
    '_Invoice_clientId_OrderByInput',
    {
        'clientId': 'SortOrder',
    },
    total=True
)

_Invoice_invoiceType_OrderByInput = TypedDict(
    '_Invoice_invoiceType_OrderByInput',
    {
        'invoiceType': 'SortOrder',
    },
    total=True
)

_Invoice_invoiceDate_OrderByInput = TypedDict(
    '_Invoice_invoiceDate_OrderByInput',
    {
        'invoiceDate': 'SortOrder',
    },
    total=True
)

_Invoice_dueDate_OrderByInput = TypedDict(
    '_Invoice_dueDate_OrderByInput',
    {
        'dueDate': 'SortOrder',
    },
    total=True
)

_Invoice_total_OrderByInput = TypedDict(
    '_Invoice_total_OrderByInput',
    {
        'total': 'SortOrder',
    },
    total=True
)

_Invoice_accountName_OrderByInput = TypedDict(
    '_Invoice_accountName_OrderByInput',
    {
        'accountName': 'SortOrder',
    },
    total=True
)

_Invoice_sortCode_OrderByInput = TypedDict(
    '_Invoice_sortCode_OrderByInput',
    {
        'sortCode': 'SortOrder',
    },
    total=True
)

_Invoice_accountNumber_OrderByInput = TypedDict(
    '_Invoice_accountNumber_OrderByInput',
    {
        'accountNumber': 'SortOrder',
    },
    total=True
)

_Invoice_iban_OrderByInput = TypedDict(
    '_Invoice_iban_OrderByInput',
    {
        'iban': 'SortOrder',
    },
    total=True
)

_Invoice_logoPath_OrderByInput = TypedDict(
    '_Invoice_logoPath_OrderByInput',
    {
        'logoPath': 'SortOrder',
    },
    total=True
)

_Invoice_pdfPath_OrderByInput = TypedDict(
    '_Invoice_pdfPath_OrderByInput',
    {
        'pdfPath': 'SortOrder',
    },
    total=True
)

_Invoice_sent_OrderByInput = TypedDict(
    '_Invoice_sent_OrderByInput',
    {
        'sent': 'SortOrder',
    },
    total=True
)

_Invoice_createdAt_OrderByInput = TypedDict(
    '_Invoice_createdAt_OrderByInput',
    {
        'createdAt': 'SortOrder',
    },
    total=True
)

_Invoice_updatedAt_OrderByInput = TypedDict(
    '_Invoice_updatedAt_OrderByInput',
    {
        'updatedAt': 'SortOrder',
    },
    total=True
)

_Invoice_RelevanceInner = TypedDict(
    '_Invoice_RelevanceInner',
    {
        'fields': 'List[InvoiceScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Invoice_RelevanceOrderByInput = TypedDict(
    '_Invoice_RelevanceOrderByInput',
    {
        '_relevance': '_Invoice_RelevanceInner',
    },
    total=True
)

InvoiceOrderByInput = Union[
    '_Invoice_id_OrderByInput',
    '_Invoice_clientId_OrderByInput',
    '_Invoice_invoiceType_OrderByInput',
    '_Invoice_invoiceDate_OrderByInput',
    '_Invoice_dueDate_OrderByInput',
    '_Invoice_total_OrderByInput',
    '_Invoice_accountName_OrderByInput',
    '_Invoice_sortCode_OrderByInput',
    '_Invoice_accountNumber_OrderByInput',
    '_Invoice_iban_OrderByInput',
    '_Invoice_logoPath_OrderByInput',
    '_Invoice_pdfPath_OrderByInput',
    '_Invoice_sent_OrderByInput',
    '_Invoice_createdAt_OrderByInput',
    '_Invoice_updatedAt_OrderByInput',
    '_Invoice_RelevanceOrderByInput',
]



# recursive Invoice types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

InvoiceRelationFilter = TypedDict(
    'InvoiceRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class InvoiceListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class InvoiceInclude(TypedDict, total=False):
    """Invoice relational arguments"""
    client: Union[bool, 'UserArgsFromInvoice']
    recurring: Union[bool, 'RecurringInvoiceArgsFromInvoice']
    services: Union[bool, 'FindManyServiceArgsFromInvoice']


    

class UserIncludeFromInvoice(TypedDict, total=False):
    """Relational arguments for Invoice"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromInvoiceRecursive1']


class UserIncludeFromInvoiceRecursive1(TypedDict, total=False):
    """Relational arguments for Invoice"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromInvoiceRecursive2']


class UserIncludeFromInvoiceRecursive2(TypedDict, total=False):
    """Relational arguments for Invoice"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromInvoiceRecursive3']


class UserIncludeFromInvoiceRecursive3(TypedDict, total=False):
    """Relational arguments for Invoice"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromInvoiceRecursive4']


class UserIncludeFromInvoiceRecursive4(TypedDict, total=False):
    """Relational arguments for Invoice"""

    

class UserArgsFromInvoice(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromInvoiceRecursive1(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromInvoiceRecursive2(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromInvoiceRecursive3(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromInvoiceRecursive4(TypedDict, total=False):
    """Arguments for Invoice"""
    
    

class FindManyUserArgsFromInvoice(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromInvoiceRecursive1(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromInvoiceRecursive2(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromInvoiceRecursive3(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromInvoiceRecursive4(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class InvoiceIncludeFromInvoice(TypedDict, total=False):
    """Relational arguments for Invoice"""
    client: Union[bool, 'UserArgsFromInvoiceRecursive1']
    recurring: Union[bool, 'RecurringInvoiceArgsFromInvoiceRecursive1']
    services: Union[bool, 'FindManyServiceArgsFromInvoiceRecursive1']


class InvoiceIncludeFromInvoiceRecursive1(TypedDict, total=False):
    """Relational arguments for Invoice"""
    client: Union[bool, 'UserArgsFromInvoiceRecursive2']
    recurring: Union[bool, 'RecurringInvoiceArgsFromInvoiceRecursive2']
    services: Union[bool, 'FindManyServiceArgsFromInvoiceRecursive2']


class InvoiceIncludeFromInvoiceRecursive2(TypedDict, total=False):
    """Relational arguments for Invoice"""
    client: Union[bool, 'UserArgsFromInvoiceRecursive3']
    recurring: Union[bool, 'RecurringInvoiceArgsFromInvoiceRecursive3']
    services: Union[bool, 'FindManyServiceArgsFromInvoiceRecursive3']


class InvoiceIncludeFromInvoiceRecursive3(TypedDict, total=False):
    """Relational arguments for Invoice"""
    client: Union[bool, 'UserArgsFromInvoiceRecursive4']
    recurring: Union[bool, 'RecurringInvoiceArgsFromInvoiceRecursive4']
    services: Union[bool, 'FindManyServiceArgsFromInvoiceRecursive4']


class InvoiceIncludeFromInvoiceRecursive4(TypedDict, total=False):
    """Relational arguments for Invoice"""

    

class InvoiceArgsFromInvoice(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'InvoiceIncludeFromInvoiceRecursive1'


class InvoiceArgsFromInvoiceRecursive1(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'InvoiceIncludeFromInvoiceRecursive2'


class InvoiceArgsFromInvoiceRecursive2(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'InvoiceIncludeFromInvoiceRecursive3'


class InvoiceArgsFromInvoiceRecursive3(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'InvoiceIncludeFromInvoiceRecursive4'


class InvoiceArgsFromInvoiceRecursive4(TypedDict, total=False):
    """Arguments for Invoice"""
    
    

class FindManyInvoiceArgsFromInvoice(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive1'


class FindManyInvoiceArgsFromInvoiceRecursive1(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive2'


class FindManyInvoiceArgsFromInvoiceRecursive2(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive3'


class FindManyInvoiceArgsFromInvoiceRecursive3(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive4'


class FindManyInvoiceArgsFromInvoiceRecursive4(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    
    

class ServiceIncludeFromInvoice(TypedDict, total=False):
    """Relational arguments for Invoice"""
    invoice: Union[bool, 'InvoiceArgsFromInvoiceRecursive1']


class ServiceIncludeFromInvoiceRecursive1(TypedDict, total=False):
    """Relational arguments for Invoice"""
    invoice: Union[bool, 'InvoiceArgsFromInvoiceRecursive2']


class ServiceIncludeFromInvoiceRecursive2(TypedDict, total=False):
    """Relational arguments for Invoice"""
    invoice: Union[bool, 'InvoiceArgsFromInvoiceRecursive3']


class ServiceIncludeFromInvoiceRecursive3(TypedDict, total=False):
    """Relational arguments for Invoice"""
    invoice: Union[bool, 'InvoiceArgsFromInvoiceRecursive4']


class ServiceIncludeFromInvoiceRecursive4(TypedDict, total=False):
    """Relational arguments for Invoice"""

    

class ServiceArgsFromInvoice(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromInvoiceRecursive1(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromInvoiceRecursive2(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromInvoiceRecursive3(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromInvoiceRecursive4(TypedDict, total=False):
    """Arguments for Invoice"""
    
    

class FindManyServiceArgsFromInvoice(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromInvoiceRecursive1(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromInvoiceRecursive2(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromInvoiceRecursive3(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromInvoiceRecursive4(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class RecurringInvoiceIncludeFromInvoice(TypedDict, total=False):
    """Relational arguments for Invoice"""
    invoice: Union[bool, 'InvoiceArgsFromInvoiceRecursive1']


class RecurringInvoiceIncludeFromInvoiceRecursive1(TypedDict, total=False):
    """Relational arguments for Invoice"""
    invoice: Union[bool, 'InvoiceArgsFromInvoiceRecursive2']


class RecurringInvoiceIncludeFromInvoiceRecursive2(TypedDict, total=False):
    """Relational arguments for Invoice"""
    invoice: Union[bool, 'InvoiceArgsFromInvoiceRecursive3']


class RecurringInvoiceIncludeFromInvoiceRecursive3(TypedDict, total=False):
    """Relational arguments for Invoice"""
    invoice: Union[bool, 'InvoiceArgsFromInvoiceRecursive4']


class RecurringInvoiceIncludeFromInvoiceRecursive4(TypedDict, total=False):
    """Relational arguments for Invoice"""

    

class RecurringInvoiceArgsFromInvoice(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive1'


class RecurringInvoiceArgsFromInvoiceRecursive1(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive2'


class RecurringInvoiceArgsFromInvoiceRecursive2(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive3'


class RecurringInvoiceArgsFromInvoiceRecursive3(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive4'


class RecurringInvoiceArgsFromInvoiceRecursive4(TypedDict, total=False):
    """Arguments for Invoice"""
    
    

class FindManyRecurringInvoiceArgsFromInvoice(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive1'


class FindManyRecurringInvoiceArgsFromInvoiceRecursive1(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive2'


class FindManyRecurringInvoiceArgsFromInvoiceRecursive2(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive3'


class FindManyRecurringInvoiceArgsFromInvoiceRecursive3(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive4'


class FindManyRecurringInvoiceArgsFromInvoiceRecursive4(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    
    

class MessageIncludeFromInvoice(TypedDict, total=False):
    """Relational arguments for Invoice"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromInvoiceRecursive1']


class MessageIncludeFromInvoiceRecursive1(TypedDict, total=False):
    """Relational arguments for Invoice"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromInvoiceRecursive2']


class MessageIncludeFromInvoiceRecursive2(TypedDict, total=False):
    """Relational arguments for Invoice"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromInvoiceRecursive3']


class MessageIncludeFromInvoiceRecursive3(TypedDict, total=False):
    """Relational arguments for Invoice"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromInvoiceRecursive4']


class MessageIncludeFromInvoiceRecursive4(TypedDict, total=False):
    """Relational arguments for Invoice"""

    

class MessageArgsFromInvoice(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromInvoiceRecursive1(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromInvoiceRecursive2(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromInvoiceRecursive3(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromInvoiceRecursive4(TypedDict, total=False):
    """Arguments for Invoice"""
    
    

class FindManyMessageArgsFromInvoice(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromInvoiceRecursive1(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromInvoiceRecursive2(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromInvoiceRecursive3(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromInvoiceRecursive4(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class RepeatRuleIncludeFromInvoice(TypedDict, total=False):
    """Relational arguments for Invoice"""
    message: Union[bool, 'MessageArgsFromInvoiceRecursive1']


class RepeatRuleIncludeFromInvoiceRecursive1(TypedDict, total=False):
    """Relational arguments for Invoice"""
    message: Union[bool, 'MessageArgsFromInvoiceRecursive2']


class RepeatRuleIncludeFromInvoiceRecursive2(TypedDict, total=False):
    """Relational arguments for Invoice"""
    message: Union[bool, 'MessageArgsFromInvoiceRecursive3']


class RepeatRuleIncludeFromInvoiceRecursive3(TypedDict, total=False):
    """Relational arguments for Invoice"""
    message: Union[bool, 'MessageArgsFromInvoiceRecursive4']


class RepeatRuleIncludeFromInvoiceRecursive4(TypedDict, total=False):
    """Relational arguments for Invoice"""

    

class RepeatRuleArgsFromInvoice(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive1'


class RepeatRuleArgsFromInvoiceRecursive1(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive2'


class RepeatRuleArgsFromInvoiceRecursive2(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive3'


class RepeatRuleArgsFromInvoiceRecursive3(TypedDict, total=False):
    """Arguments for Invoice"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive4'


class RepeatRuleArgsFromInvoiceRecursive4(TypedDict, total=False):
    """Arguments for Invoice"""
    
    

class FindManyRepeatRuleArgsFromInvoice(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive1'


class FindManyRepeatRuleArgsFromInvoiceRecursive1(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive2'


class FindManyRepeatRuleArgsFromInvoiceRecursive2(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive3'


class FindManyRepeatRuleArgsFromInvoiceRecursive3(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive4'


class FindManyRepeatRuleArgsFromInvoiceRecursive4(TypedDict, total=False):
    """Arguments for Invoice"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    


FindManyInvoiceArgs = FindManyInvoiceArgsFromInvoice
FindFirstInvoiceArgs = FindManyInvoiceArgsFromInvoice


    

class InvoiceWhereInput(TypedDict, total=False):
    """Invoice arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    client: 'UserRelationFilter'
    recurring: 'RecurringInvoiceRelationFilter'
    invoiceType: Union[_str, 'types.StringFilter']
    invoiceDate: Union[datetime.datetime, 'types.DateTimeFilter']
    dueDate: Union[datetime.datetime, 'types.DateTimeFilter']
    total: Union[_float, 'types.FloatFilter']
    services: 'ServiceListRelationFilter'
    accountName: Union[_str, 'types.StringFilter']
    sortCode: Union[_str, 'types.StringFilter']
    accountNumber: Union[_str, 'types.StringFilter']
    iban: Union[None, _str, 'types.StringFilter']
    logoPath: Union[None, _str, 'types.StringFilter']
    pdfPath: Union[None, _str, 'types.StringFilter']
    sent: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['InvoiceWhereInputRecursive1', List['InvoiceWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['InvoiceWhereInputRecursive1']
    OR: List['InvoiceWhereInputRecursive1']
    NOT: List['InvoiceWhereInputRecursive1']


class InvoiceWhereInputRecursive1(TypedDict, total=False):
    """Invoice arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    client: 'UserRelationFilter'
    recurring: 'RecurringInvoiceRelationFilter'
    invoiceType: Union[_str, 'types.StringFilter']
    invoiceDate: Union[datetime.datetime, 'types.DateTimeFilter']
    dueDate: Union[datetime.datetime, 'types.DateTimeFilter']
    total: Union[_float, 'types.FloatFilter']
    services: 'ServiceListRelationFilter'
    accountName: Union[_str, 'types.StringFilter']
    sortCode: Union[_str, 'types.StringFilter']
    accountNumber: Union[_str, 'types.StringFilter']
    iban: Union[None, _str, 'types.StringFilter']
    logoPath: Union[None, _str, 'types.StringFilter']
    pdfPath: Union[None, _str, 'types.StringFilter']
    sent: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['InvoiceWhereInputRecursive2', List['InvoiceWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['InvoiceWhereInputRecursive2']
    OR: List['InvoiceWhereInputRecursive2']
    NOT: List['InvoiceWhereInputRecursive2']


class InvoiceWhereInputRecursive2(TypedDict, total=False):
    """Invoice arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    client: 'UserRelationFilter'
    recurring: 'RecurringInvoiceRelationFilter'
    invoiceType: Union[_str, 'types.StringFilter']
    invoiceDate: Union[datetime.datetime, 'types.DateTimeFilter']
    dueDate: Union[datetime.datetime, 'types.DateTimeFilter']
    total: Union[_float, 'types.FloatFilter']
    services: 'ServiceListRelationFilter'
    accountName: Union[_str, 'types.StringFilter']
    sortCode: Union[_str, 'types.StringFilter']
    accountNumber: Union[_str, 'types.StringFilter']
    iban: Union[None, _str, 'types.StringFilter']
    logoPath: Union[None, _str, 'types.StringFilter']
    pdfPath: Union[None, _str, 'types.StringFilter']
    sent: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['InvoiceWhereInputRecursive3', List['InvoiceWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['InvoiceWhereInputRecursive3']
    OR: List['InvoiceWhereInputRecursive3']
    NOT: List['InvoiceWhereInputRecursive3']


class InvoiceWhereInputRecursive3(TypedDict, total=False):
    """Invoice arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    client: 'UserRelationFilter'
    recurring: 'RecurringInvoiceRelationFilter'
    invoiceType: Union[_str, 'types.StringFilter']
    invoiceDate: Union[datetime.datetime, 'types.DateTimeFilter']
    dueDate: Union[datetime.datetime, 'types.DateTimeFilter']
    total: Union[_float, 'types.FloatFilter']
    services: 'ServiceListRelationFilter'
    accountName: Union[_str, 'types.StringFilter']
    sortCode: Union[_str, 'types.StringFilter']
    accountNumber: Union[_str, 'types.StringFilter']
    iban: Union[None, _str, 'types.StringFilter']
    logoPath: Union[None, _str, 'types.StringFilter']
    pdfPath: Union[None, _str, 'types.StringFilter']
    sent: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['InvoiceWhereInputRecursive4', List['InvoiceWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['InvoiceWhereInputRecursive4']
    OR: List['InvoiceWhereInputRecursive4']
    NOT: List['InvoiceWhereInputRecursive4']


class InvoiceWhereInputRecursive4(TypedDict, total=False):
    """Invoice arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    clientId: Union[_str, 'types.StringFilter']
    client: 'UserRelationFilter'
    recurring: 'RecurringInvoiceRelationFilter'
    invoiceType: Union[_str, 'types.StringFilter']
    invoiceDate: Union[datetime.datetime, 'types.DateTimeFilter']
    dueDate: Union[datetime.datetime, 'types.DateTimeFilter']
    total: Union[_float, 'types.FloatFilter']
    services: 'ServiceListRelationFilter'
    accountName: Union[_str, 'types.StringFilter']
    sortCode: Union[_str, 'types.StringFilter']
    accountNumber: Union[_str, 'types.StringFilter']
    iban: Union[None, _str, 'types.StringFilter']
    logoPath: Union[None, _str, 'types.StringFilter']
    pdfPath: Union[None, _str, 'types.StringFilter']
    sent: Union[_bool, 'types.BooleanFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate Invoice types


    

class InvoiceScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Invoice arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceType: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    dueDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    total: Union[_float, 'types.FloatWithAggregatesFilter']
    accountName: Union[_str, 'types.StringWithAggregatesFilter']
    sortCode: Union[_str, 'types.StringWithAggregatesFilter']
    accountNumber: Union[_str, 'types.StringWithAggregatesFilter']
    iban: Union[_str, 'types.StringWithAggregatesFilter']
    logoPath: Union[_str, 'types.StringWithAggregatesFilter']
    pdfPath: Union[_str, 'types.StringWithAggregatesFilter']
    sent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['InvoiceScalarWhereWithAggregatesInputRecursive1']
    OR: List['InvoiceScalarWhereWithAggregatesInputRecursive1']
    NOT: List['InvoiceScalarWhereWithAggregatesInputRecursive1']


class InvoiceScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Invoice arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceType: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    dueDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    total: Union[_float, 'types.FloatWithAggregatesFilter']
    accountName: Union[_str, 'types.StringWithAggregatesFilter']
    sortCode: Union[_str, 'types.StringWithAggregatesFilter']
    accountNumber: Union[_str, 'types.StringWithAggregatesFilter']
    iban: Union[_str, 'types.StringWithAggregatesFilter']
    logoPath: Union[_str, 'types.StringWithAggregatesFilter']
    pdfPath: Union[_str, 'types.StringWithAggregatesFilter']
    sent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['InvoiceScalarWhereWithAggregatesInputRecursive2']
    OR: List['InvoiceScalarWhereWithAggregatesInputRecursive2']
    NOT: List['InvoiceScalarWhereWithAggregatesInputRecursive2']


class InvoiceScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Invoice arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceType: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    dueDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    total: Union[_float, 'types.FloatWithAggregatesFilter']
    accountName: Union[_str, 'types.StringWithAggregatesFilter']
    sortCode: Union[_str, 'types.StringWithAggregatesFilter']
    accountNumber: Union[_str, 'types.StringWithAggregatesFilter']
    iban: Union[_str, 'types.StringWithAggregatesFilter']
    logoPath: Union[_str, 'types.StringWithAggregatesFilter']
    pdfPath: Union[_str, 'types.StringWithAggregatesFilter']
    sent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['InvoiceScalarWhereWithAggregatesInputRecursive3']
    OR: List['InvoiceScalarWhereWithAggregatesInputRecursive3']
    NOT: List['InvoiceScalarWhereWithAggregatesInputRecursive3']


class InvoiceScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Invoice arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceType: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    dueDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    total: Union[_float, 'types.FloatWithAggregatesFilter']
    accountName: Union[_str, 'types.StringWithAggregatesFilter']
    sortCode: Union[_str, 'types.StringWithAggregatesFilter']
    accountNumber: Union[_str, 'types.StringWithAggregatesFilter']
    iban: Union[_str, 'types.StringWithAggregatesFilter']
    logoPath: Union[_str, 'types.StringWithAggregatesFilter']
    pdfPath: Union[_str, 'types.StringWithAggregatesFilter']
    sent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['InvoiceScalarWhereWithAggregatesInputRecursive4']
    OR: List['InvoiceScalarWhereWithAggregatesInputRecursive4']
    NOT: List['InvoiceScalarWhereWithAggregatesInputRecursive4']


class InvoiceScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Invoice arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    clientId: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceType: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    dueDate: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    total: Union[_float, 'types.FloatWithAggregatesFilter']
    accountName: Union[_str, 'types.StringWithAggregatesFilter']
    sortCode: Union[_str, 'types.StringWithAggregatesFilter']
    accountNumber: Union[_str, 'types.StringWithAggregatesFilter']
    iban: Union[_str, 'types.StringWithAggregatesFilter']
    logoPath: Union[_str, 'types.StringWithAggregatesFilter']
    pdfPath: Union[_str, 'types.StringWithAggregatesFilter']
    sent: Union[_bool, 'types.BooleanWithAggregatesFilter']
    createdAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']
    updatedAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class InvoiceGroupByOutput(TypedDict, total=False):
    id: _str
    clientId: _str
    invoiceType: _str
    invoiceDate: datetime.datetime
    dueDate: datetime.datetime
    total: _float
    accountName: _str
    sortCode: _str
    accountNumber: _str
    iban: _str
    logoPath: _str
    pdfPath: _str
    sent: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime
    _sum: 'InvoiceSumAggregateOutput'
    _avg: 'InvoiceAvgAggregateOutput'
    _min: 'InvoiceMinAggregateOutput'
    _max: 'InvoiceMaxAggregateOutput'
    _count: 'InvoiceCountAggregateOutput'


class InvoiceAvgAggregateOutput(TypedDict, total=False):
    """Invoice output for aggregating averages"""
    total: float


class InvoiceSumAggregateOutput(TypedDict, total=False):
    """Invoice output for aggregating sums"""
    total: _float


class InvoiceScalarAggregateOutput(TypedDict, total=False):
    """Invoice output including scalar fields"""
    id: _str
    clientId: _str
    invoiceType: _str
    invoiceDate: datetime.datetime
    dueDate: datetime.datetime
    total: _float
    accountName: _str
    sortCode: _str
    accountNumber: _str
    iban: _str
    logoPath: _str
    pdfPath: _str
    sent: _bool
    createdAt: datetime.datetime
    updatedAt: datetime.datetime


InvoiceMinAggregateOutput = InvoiceScalarAggregateOutput
InvoiceMaxAggregateOutput = InvoiceScalarAggregateOutput


class InvoiceMaxAggregateInput(TypedDict, total=False):
    """Invoice input for aggregating by max"""
    id: bool
    clientId: bool
    invoiceType: bool
    invoiceDate: bool
    dueDate: bool
    total: bool
    accountName: bool
    sortCode: bool
    accountNumber: bool
    iban: bool
    logoPath: bool
    pdfPath: bool
    sent: bool
    createdAt: bool
    updatedAt: bool


class InvoiceMinAggregateInput(TypedDict, total=False):
    """Invoice input for aggregating by min"""
    id: bool
    clientId: bool
    invoiceType: bool
    invoiceDate: bool
    dueDate: bool
    total: bool
    accountName: bool
    sortCode: bool
    accountNumber: bool
    iban: bool
    logoPath: bool
    pdfPath: bool
    sent: bool
    createdAt: bool
    updatedAt: bool


class InvoiceNumberAggregateInput(TypedDict, total=False):
    """Invoice input for aggregating numbers"""
    total: bool


InvoiceAvgAggregateInput = InvoiceNumberAggregateInput
InvoiceSumAggregateInput = InvoiceNumberAggregateInput


InvoiceCountAggregateInput = TypedDict(
    'InvoiceCountAggregateInput',
    {
        'id': bool,
        'clientId': bool,
        'invoiceType': bool,
        'invoiceDate': bool,
        'dueDate': bool,
        'total': bool,
        'accountName': bool,
        'sortCode': bool,
        'accountNumber': bool,
        'iban': bool,
        'logoPath': bool,
        'pdfPath': bool,
        'sent': bool,
        'createdAt': bool,
        'updatedAt': bool,
        '_all': bool,
    },
    total=False,
)

InvoiceCountAggregateOutput = TypedDict(
    'InvoiceCountAggregateOutput',
    {
        'id': int,
        'clientId': int,
        'invoiceType': int,
        'invoiceDate': int,
        'dueDate': int,
        'total': int,
        'accountName': int,
        'sortCode': int,
        'accountNumber': int,
        'iban': int,
        'logoPath': int,
        'pdfPath': int,
        'sent': int,
        'createdAt': int,
        'updatedAt': int,
        '_all': int,
    },
    total=False,
)


InvoiceKeys = Literal[
    'id',
    'clientId',
    'client',
    'recurring',
    'invoiceType',
    'invoiceDate',
    'dueDate',
    'total',
    'services',
    'accountName',
    'sortCode',
    'accountNumber',
    'iban',
    'logoPath',
    'pdfPath',
    'sent',
    'createdAt',
    'updatedAt',
]
InvoiceScalarFieldKeys = Literal[
    'id',
    'clientId',
    'invoiceType',
    'invoiceDate',
    'dueDate',
    'total',
    'accountName',
    'sortCode',
    'accountNumber',
    'iban',
    'logoPath',
    'pdfPath',
    'sent',
    'createdAt',
    'updatedAt',
]
InvoiceScalarFieldKeysT = TypeVar('InvoiceScalarFieldKeysT', bound=InvoiceScalarFieldKeys)

InvoiceRelationalFieldKeys = Literal[
        'client',
        'recurring',
        'services',
    ]

# Service types

class ServiceOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Service create method"""
    id: _str
    invoiceId: _str
    invoice: 'InvoiceCreateNestedWithoutRelationsInput'


class ServiceCreateInput(ServiceOptionalCreateInput):
    """Required arguments to the Service create method"""
    description: _str
    price: _float


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class ServiceOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Service create method, without relations"""
    id: _str
    invoiceId: _str


class ServiceCreateWithoutRelationsInput(ServiceOptionalCreateWithoutRelationsInput):
    """Required arguments to the Service create method, without relations"""
    description: _str
    price: _float

class ServiceConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'ServiceCreateWithoutRelationsInput'
    where: 'ServiceWhereUniqueInput'

class ServiceCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'ServiceCreateWithoutRelationsInput'
    connect: 'ServiceWhereUniqueInput'
    connect_or_create: 'ServiceConnectOrCreateWithoutRelationsInput'


class ServiceCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['ServiceCreateWithoutRelationsInput', List['ServiceCreateWithoutRelationsInput']]
    connect: Union['ServiceWhereUniqueInput', List['ServiceWhereUniqueInput']]
    connect_or_create: Union['ServiceConnectOrCreateWithoutRelationsInput', List['ServiceConnectOrCreateWithoutRelationsInput']]

_ServiceWhereUnique_id_Input = TypedDict(
    '_ServiceWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

ServiceWhereUniqueInput = _ServiceWhereUnique_id_Input


class ServiceUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    invoice: 'InvoiceUpdateOneWithoutRelationsInput'
    description: _str
    price: Union[AtomicFloatInput, _float]


class ServiceUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    description: _str
    price: Union[AtomicFloatInput, _float]


class ServiceUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['ServiceCreateWithoutRelationsInput']
    connect: List['ServiceWhereUniqueInput']
    connect_or_create: List['ServiceConnectOrCreateWithoutRelationsInput']
    set: List['ServiceWhereUniqueInput']
    disconnect: List['ServiceWhereUniqueInput']
    delete: List['ServiceWhereUniqueInput']

    # TODO
    # update: List['ServiceUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['ServiceUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['ServiceScalarWhereInput']
    # upsert: List['ServiceUpserteWithWhereUniqueWithoutRelationsInput']


class ServiceUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'ServiceCreateWithoutRelationsInput'
    connect: 'ServiceWhereUniqueInput'
    connect_or_create: 'ServiceConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'ServiceUpdateInput'
    # upsert: 'ServiceUpsertWithoutRelationsInput'


class ServiceUpsertInput(TypedDict):
    create: 'ServiceCreateInput'
    update: 'ServiceUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Service_id_OrderByInput = TypedDict(
    '_Service_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Service_invoiceId_OrderByInput = TypedDict(
    '_Service_invoiceId_OrderByInput',
    {
        'invoiceId': 'SortOrder',
    },
    total=True
)

_Service_description_OrderByInput = TypedDict(
    '_Service_description_OrderByInput',
    {
        'description': 'SortOrder',
    },
    total=True
)

_Service_price_OrderByInput = TypedDict(
    '_Service_price_OrderByInput',
    {
        'price': 'SortOrder',
    },
    total=True
)

_Service_RelevanceInner = TypedDict(
    '_Service_RelevanceInner',
    {
        'fields': 'List[ServiceScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Service_RelevanceOrderByInput = TypedDict(
    '_Service_RelevanceOrderByInput',
    {
        '_relevance': '_Service_RelevanceInner',
    },
    total=True
)

ServiceOrderByInput = Union[
    '_Service_id_OrderByInput',
    '_Service_invoiceId_OrderByInput',
    '_Service_description_OrderByInput',
    '_Service_price_OrderByInput',
    '_Service_RelevanceOrderByInput',
]



# recursive Service types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

ServiceRelationFilter = TypedDict(
    'ServiceRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class ServiceListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class ServiceInclude(TypedDict, total=False):
    """Service relational arguments"""
    invoice: Union[bool, 'InvoiceArgsFromService']


    

class UserIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromServiceRecursive1']


class UserIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromServiceRecursive2']


class UserIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromServiceRecursive3']


class UserIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromServiceRecursive4']


class UserIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class UserArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyUserArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class InvoiceIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    client: Union[bool, 'UserArgsFromServiceRecursive1']
    recurring: Union[bool, 'RecurringInvoiceArgsFromServiceRecursive1']
    services: Union[bool, 'FindManyServiceArgsFromServiceRecursive1']


class InvoiceIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    client: Union[bool, 'UserArgsFromServiceRecursive2']
    recurring: Union[bool, 'RecurringInvoiceArgsFromServiceRecursive2']
    services: Union[bool, 'FindManyServiceArgsFromServiceRecursive2']


class InvoiceIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    client: Union[bool, 'UserArgsFromServiceRecursive3']
    recurring: Union[bool, 'RecurringInvoiceArgsFromServiceRecursive3']
    services: Union[bool, 'FindManyServiceArgsFromServiceRecursive3']


class InvoiceIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    client: Union[bool, 'UserArgsFromServiceRecursive4']
    recurring: Union[bool, 'RecurringInvoiceArgsFromServiceRecursive4']
    services: Union[bool, 'FindManyServiceArgsFromServiceRecursive4']


class InvoiceIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class InvoiceArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'InvoiceIncludeFromInvoiceRecursive1'


class InvoiceArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'InvoiceIncludeFromInvoiceRecursive2'


class InvoiceArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'InvoiceIncludeFromInvoiceRecursive3'


class InvoiceArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'InvoiceIncludeFromInvoiceRecursive4'


class InvoiceArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyInvoiceArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive1'


class FindManyInvoiceArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive2'


class FindManyInvoiceArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive3'


class FindManyInvoiceArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive4'


class FindManyInvoiceArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    
    

class ServiceIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    invoice: Union[bool, 'InvoiceArgsFromServiceRecursive1']


class ServiceIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    invoice: Union[bool, 'InvoiceArgsFromServiceRecursive2']


class ServiceIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    invoice: Union[bool, 'InvoiceArgsFromServiceRecursive3']


class ServiceIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    invoice: Union[bool, 'InvoiceArgsFromServiceRecursive4']


class ServiceIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class ServiceArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyServiceArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class RecurringInvoiceIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    invoice: Union[bool, 'InvoiceArgsFromServiceRecursive1']


class RecurringInvoiceIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    invoice: Union[bool, 'InvoiceArgsFromServiceRecursive2']


class RecurringInvoiceIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    invoice: Union[bool, 'InvoiceArgsFromServiceRecursive3']


class RecurringInvoiceIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    invoice: Union[bool, 'InvoiceArgsFromServiceRecursive4']


class RecurringInvoiceIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class RecurringInvoiceArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive1'


class RecurringInvoiceArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive2'


class RecurringInvoiceArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive3'


class RecurringInvoiceArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive4'


class RecurringInvoiceArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyRecurringInvoiceArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive1'


class FindManyRecurringInvoiceArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive2'


class FindManyRecurringInvoiceArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive3'


class FindManyRecurringInvoiceArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive4'


class FindManyRecurringInvoiceArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    
    

class MessageIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromServiceRecursive1']


class MessageIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromServiceRecursive2']


class MessageIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromServiceRecursive3']


class MessageIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromServiceRecursive4']


class MessageIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class MessageArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyMessageArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class RepeatRuleIncludeFromService(TypedDict, total=False):
    """Relational arguments for Service"""
    message: Union[bool, 'MessageArgsFromServiceRecursive1']


class RepeatRuleIncludeFromServiceRecursive1(TypedDict, total=False):
    """Relational arguments for Service"""
    message: Union[bool, 'MessageArgsFromServiceRecursive2']


class RepeatRuleIncludeFromServiceRecursive2(TypedDict, total=False):
    """Relational arguments for Service"""
    message: Union[bool, 'MessageArgsFromServiceRecursive3']


class RepeatRuleIncludeFromServiceRecursive3(TypedDict, total=False):
    """Relational arguments for Service"""
    message: Union[bool, 'MessageArgsFromServiceRecursive4']


class RepeatRuleIncludeFromServiceRecursive4(TypedDict, total=False):
    """Relational arguments for Service"""

    

class RepeatRuleArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive1'


class RepeatRuleArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive2'


class RepeatRuleArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive3'


class RepeatRuleArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive4'


class RepeatRuleArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    
    

class FindManyRepeatRuleArgsFromService(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive1'


class FindManyRepeatRuleArgsFromServiceRecursive1(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive2'


class FindManyRepeatRuleArgsFromServiceRecursive2(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive3'


class FindManyRepeatRuleArgsFromServiceRecursive3(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive4'


class FindManyRepeatRuleArgsFromServiceRecursive4(TypedDict, total=False):
    """Arguments for Service"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    


FindManyServiceArgs = FindManyServiceArgsFromService
FindFirstServiceArgs = FindManyServiceArgsFromService


    

class ServiceWhereInput(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    invoiceId: Union[_str, 'types.StringFilter']
    invoice: 'InvoiceRelationFilter'
    description: Union[_str, 'types.StringFilter']
    price: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['ServiceWhereInputRecursive1', List['ServiceWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['ServiceWhereInputRecursive1']
    OR: List['ServiceWhereInputRecursive1']
    NOT: List['ServiceWhereInputRecursive1']


class ServiceWhereInputRecursive1(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    invoiceId: Union[_str, 'types.StringFilter']
    invoice: 'InvoiceRelationFilter'
    description: Union[_str, 'types.StringFilter']
    price: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['ServiceWhereInputRecursive2', List['ServiceWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['ServiceWhereInputRecursive2']
    OR: List['ServiceWhereInputRecursive2']
    NOT: List['ServiceWhereInputRecursive2']


class ServiceWhereInputRecursive2(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    invoiceId: Union[_str, 'types.StringFilter']
    invoice: 'InvoiceRelationFilter'
    description: Union[_str, 'types.StringFilter']
    price: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['ServiceWhereInputRecursive3', List['ServiceWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['ServiceWhereInputRecursive3']
    OR: List['ServiceWhereInputRecursive3']
    NOT: List['ServiceWhereInputRecursive3']


class ServiceWhereInputRecursive3(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    invoiceId: Union[_str, 'types.StringFilter']
    invoice: 'InvoiceRelationFilter'
    description: Union[_str, 'types.StringFilter']
    price: Union[_float, 'types.FloatFilter']

    # should be noted that AND and NOT should be Union['ServiceWhereInputRecursive4', List['ServiceWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['ServiceWhereInputRecursive4']
    OR: List['ServiceWhereInputRecursive4']
    NOT: List['ServiceWhereInputRecursive4']


class ServiceWhereInputRecursive4(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    invoiceId: Union[_str, 'types.StringFilter']
    invoice: 'InvoiceRelationFilter'
    description: Union[_str, 'types.StringFilter']
    price: Union[_float, 'types.FloatFilter']



# aggregate Service types


    

class ServiceScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceId: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['ServiceScalarWhereWithAggregatesInputRecursive1']
    OR: List['ServiceScalarWhereWithAggregatesInputRecursive1']
    NOT: List['ServiceScalarWhereWithAggregatesInputRecursive1']


class ServiceScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceId: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['ServiceScalarWhereWithAggregatesInputRecursive2']
    OR: List['ServiceScalarWhereWithAggregatesInputRecursive2']
    NOT: List['ServiceScalarWhereWithAggregatesInputRecursive2']


class ServiceScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceId: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['ServiceScalarWhereWithAggregatesInputRecursive3']
    OR: List['ServiceScalarWhereWithAggregatesInputRecursive3']
    NOT: List['ServiceScalarWhereWithAggregatesInputRecursive3']


class ServiceScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceId: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']

    AND: List['ServiceScalarWhereWithAggregatesInputRecursive4']
    OR: List['ServiceScalarWhereWithAggregatesInputRecursive4']
    NOT: List['ServiceScalarWhereWithAggregatesInputRecursive4']


class ServiceScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Service arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceId: Union[_str, 'types.StringWithAggregatesFilter']
    description: Union[_str, 'types.StringWithAggregatesFilter']
    price: Union[_float, 'types.FloatWithAggregatesFilter']



class ServiceGroupByOutput(TypedDict, total=False):
    id: _str
    invoiceId: _str
    description: _str
    price: _float
    _sum: 'ServiceSumAggregateOutput'
    _avg: 'ServiceAvgAggregateOutput'
    _min: 'ServiceMinAggregateOutput'
    _max: 'ServiceMaxAggregateOutput'
    _count: 'ServiceCountAggregateOutput'


class ServiceAvgAggregateOutput(TypedDict, total=False):
    """Service output for aggregating averages"""
    price: float


class ServiceSumAggregateOutput(TypedDict, total=False):
    """Service output for aggregating sums"""
    price: _float


class ServiceScalarAggregateOutput(TypedDict, total=False):
    """Service output including scalar fields"""
    id: _str
    invoiceId: _str
    description: _str
    price: _float


ServiceMinAggregateOutput = ServiceScalarAggregateOutput
ServiceMaxAggregateOutput = ServiceScalarAggregateOutput


class ServiceMaxAggregateInput(TypedDict, total=False):
    """Service input for aggregating by max"""
    id: bool
    invoiceId: bool
    description: bool
    price: bool


class ServiceMinAggregateInput(TypedDict, total=False):
    """Service input for aggregating by min"""
    id: bool
    invoiceId: bool
    description: bool
    price: bool


class ServiceNumberAggregateInput(TypedDict, total=False):
    """Service input for aggregating numbers"""
    price: bool


ServiceAvgAggregateInput = ServiceNumberAggregateInput
ServiceSumAggregateInput = ServiceNumberAggregateInput


ServiceCountAggregateInput = TypedDict(
    'ServiceCountAggregateInput',
    {
        'id': bool,
        'invoiceId': bool,
        'description': bool,
        'price': bool,
        '_all': bool,
    },
    total=False,
)

ServiceCountAggregateOutput = TypedDict(
    'ServiceCountAggregateOutput',
    {
        'id': int,
        'invoiceId': int,
        'description': int,
        'price': int,
        '_all': int,
    },
    total=False,
)


ServiceKeys = Literal[
    'id',
    'invoiceId',
    'invoice',
    'description',
    'price',
]
ServiceScalarFieldKeys = Literal[
    'id',
    'invoiceId',
    'description',
    'price',
]
ServiceScalarFieldKeysT = TypeVar('ServiceScalarFieldKeysT', bound=ServiceScalarFieldKeys)

ServiceRelationalFieldKeys = Literal[
        'invoice',
    ]

# RecurringInvoice types

class RecurringInvoiceOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the RecurringInvoice create method"""
    id: _str
    invoiceId: _str
    invoice: 'InvoiceCreateNestedWithoutRelationsInput'


class RecurringInvoiceCreateInput(RecurringInvoiceOptionalCreateInput):
    """Required arguments to the RecurringInvoice create method"""
    frequency: _str
    nextRun: datetime.datetime


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class RecurringInvoiceOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the RecurringInvoice create method, without relations"""
    id: _str
    invoiceId: _str


class RecurringInvoiceCreateWithoutRelationsInput(RecurringInvoiceOptionalCreateWithoutRelationsInput):
    """Required arguments to the RecurringInvoice create method, without relations"""
    frequency: _str
    nextRun: datetime.datetime

class RecurringInvoiceConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'RecurringInvoiceCreateWithoutRelationsInput'
    where: 'RecurringInvoiceWhereUniqueInput'

class RecurringInvoiceCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'RecurringInvoiceCreateWithoutRelationsInput'
    connect: 'RecurringInvoiceWhereUniqueInput'
    connect_or_create: 'RecurringInvoiceConnectOrCreateWithoutRelationsInput'


class RecurringInvoiceCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['RecurringInvoiceCreateWithoutRelationsInput', List['RecurringInvoiceCreateWithoutRelationsInput']]
    connect: Union['RecurringInvoiceWhereUniqueInput', List['RecurringInvoiceWhereUniqueInput']]
    connect_or_create: Union['RecurringInvoiceConnectOrCreateWithoutRelationsInput', List['RecurringInvoiceConnectOrCreateWithoutRelationsInput']]

_RecurringInvoiceWhereUnique_id_Input = TypedDict(
    '_RecurringInvoiceWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_RecurringInvoiceWhereUnique_invoiceId_Input = TypedDict(
    '_RecurringInvoiceWhereUnique_invoiceId_Input',
    {
        'invoiceId': '_str',
    },
    total=True
)

RecurringInvoiceWhereUniqueInput = Union[
    '_RecurringInvoiceWhereUnique_id_Input',
    '_RecurringInvoiceWhereUnique_invoiceId_Input',
]


class RecurringInvoiceUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    invoice: 'InvoiceUpdateOneWithoutRelationsInput'
    frequency: _str
    nextRun: datetime.datetime


class RecurringInvoiceUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    frequency: _str
    nextRun: datetime.datetime


class RecurringInvoiceUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['RecurringInvoiceCreateWithoutRelationsInput']
    connect: List['RecurringInvoiceWhereUniqueInput']
    connect_or_create: List['RecurringInvoiceConnectOrCreateWithoutRelationsInput']
    set: List['RecurringInvoiceWhereUniqueInput']
    disconnect: List['RecurringInvoiceWhereUniqueInput']
    delete: List['RecurringInvoiceWhereUniqueInput']

    # TODO
    # update: List['RecurringInvoiceUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['RecurringInvoiceUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['RecurringInvoiceScalarWhereInput']
    # upsert: List['RecurringInvoiceUpserteWithWhereUniqueWithoutRelationsInput']


class RecurringInvoiceUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'RecurringInvoiceCreateWithoutRelationsInput'
    connect: 'RecurringInvoiceWhereUniqueInput'
    connect_or_create: 'RecurringInvoiceConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'RecurringInvoiceUpdateInput'
    # upsert: 'RecurringInvoiceUpsertWithoutRelationsInput'


class RecurringInvoiceUpsertInput(TypedDict):
    create: 'RecurringInvoiceCreateInput'
    update: 'RecurringInvoiceUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_RecurringInvoice_id_OrderByInput = TypedDict(
    '_RecurringInvoice_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_RecurringInvoice_invoiceId_OrderByInput = TypedDict(
    '_RecurringInvoice_invoiceId_OrderByInput',
    {
        'invoiceId': 'SortOrder',
    },
    total=True
)

_RecurringInvoice_frequency_OrderByInput = TypedDict(
    '_RecurringInvoice_frequency_OrderByInput',
    {
        'frequency': 'SortOrder',
    },
    total=True
)

_RecurringInvoice_nextRun_OrderByInput = TypedDict(
    '_RecurringInvoice_nextRun_OrderByInput',
    {
        'nextRun': 'SortOrder',
    },
    total=True
)

_RecurringInvoice_RelevanceInner = TypedDict(
    '_RecurringInvoice_RelevanceInner',
    {
        'fields': 'List[RecurringInvoiceScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_RecurringInvoice_RelevanceOrderByInput = TypedDict(
    '_RecurringInvoice_RelevanceOrderByInput',
    {
        '_relevance': '_RecurringInvoice_RelevanceInner',
    },
    total=True
)

RecurringInvoiceOrderByInput = Union[
    '_RecurringInvoice_id_OrderByInput',
    '_RecurringInvoice_invoiceId_OrderByInput',
    '_RecurringInvoice_frequency_OrderByInput',
    '_RecurringInvoice_nextRun_OrderByInput',
    '_RecurringInvoice_RelevanceOrderByInput',
]



# recursive RecurringInvoice types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

RecurringInvoiceRelationFilter = TypedDict(
    'RecurringInvoiceRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class RecurringInvoiceListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class RecurringInvoiceInclude(TypedDict, total=False):
    """RecurringInvoice relational arguments"""
    invoice: Union[bool, 'InvoiceArgsFromRecurringInvoice']


    

class UserIncludeFromRecurringInvoice(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromRecurringInvoiceRecursive1']


class UserIncludeFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromRecurringInvoiceRecursive2']


class UserIncludeFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromRecurringInvoiceRecursive3']


class UserIncludeFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromRecurringInvoiceRecursive4']


class UserIncludeFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""

    

class UserArgsFromRecurringInvoice(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    
    

class FindManyUserArgsFromRecurringInvoice(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class InvoiceIncludeFromRecurringInvoice(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    client: Union[bool, 'UserArgsFromRecurringInvoiceRecursive1']
    recurring: Union[bool, 'RecurringInvoiceArgsFromRecurringInvoiceRecursive1']
    services: Union[bool, 'FindManyServiceArgsFromRecurringInvoiceRecursive1']


class InvoiceIncludeFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    client: Union[bool, 'UserArgsFromRecurringInvoiceRecursive2']
    recurring: Union[bool, 'RecurringInvoiceArgsFromRecurringInvoiceRecursive2']
    services: Union[bool, 'FindManyServiceArgsFromRecurringInvoiceRecursive2']


class InvoiceIncludeFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    client: Union[bool, 'UserArgsFromRecurringInvoiceRecursive3']
    recurring: Union[bool, 'RecurringInvoiceArgsFromRecurringInvoiceRecursive3']
    services: Union[bool, 'FindManyServiceArgsFromRecurringInvoiceRecursive3']


class InvoiceIncludeFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    client: Union[bool, 'UserArgsFromRecurringInvoiceRecursive4']
    recurring: Union[bool, 'RecurringInvoiceArgsFromRecurringInvoiceRecursive4']
    services: Union[bool, 'FindManyServiceArgsFromRecurringInvoiceRecursive4']


class InvoiceIncludeFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""

    

class InvoiceArgsFromRecurringInvoice(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'InvoiceIncludeFromInvoiceRecursive1'


class InvoiceArgsFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'InvoiceIncludeFromInvoiceRecursive2'


class InvoiceArgsFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'InvoiceIncludeFromInvoiceRecursive3'


class InvoiceArgsFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'InvoiceIncludeFromInvoiceRecursive4'


class InvoiceArgsFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    
    

class FindManyInvoiceArgsFromRecurringInvoice(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive1'


class FindManyInvoiceArgsFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive2'


class FindManyInvoiceArgsFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive3'


class FindManyInvoiceArgsFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive4'


class FindManyInvoiceArgsFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    
    

class ServiceIncludeFromRecurringInvoice(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    invoice: Union[bool, 'InvoiceArgsFromRecurringInvoiceRecursive1']


class ServiceIncludeFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    invoice: Union[bool, 'InvoiceArgsFromRecurringInvoiceRecursive2']


class ServiceIncludeFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    invoice: Union[bool, 'InvoiceArgsFromRecurringInvoiceRecursive3']


class ServiceIncludeFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    invoice: Union[bool, 'InvoiceArgsFromRecurringInvoiceRecursive4']


class ServiceIncludeFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""

    

class ServiceArgsFromRecurringInvoice(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    
    

class FindManyServiceArgsFromRecurringInvoice(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class RecurringInvoiceIncludeFromRecurringInvoice(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    invoice: Union[bool, 'InvoiceArgsFromRecurringInvoiceRecursive1']


class RecurringInvoiceIncludeFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    invoice: Union[bool, 'InvoiceArgsFromRecurringInvoiceRecursive2']


class RecurringInvoiceIncludeFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    invoice: Union[bool, 'InvoiceArgsFromRecurringInvoiceRecursive3']


class RecurringInvoiceIncludeFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    invoice: Union[bool, 'InvoiceArgsFromRecurringInvoiceRecursive4']


class RecurringInvoiceIncludeFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""

    

class RecurringInvoiceArgsFromRecurringInvoice(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive1'


class RecurringInvoiceArgsFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive2'


class RecurringInvoiceArgsFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive3'


class RecurringInvoiceArgsFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive4'


class RecurringInvoiceArgsFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    
    

class FindManyRecurringInvoiceArgsFromRecurringInvoice(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive1'


class FindManyRecurringInvoiceArgsFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive2'


class FindManyRecurringInvoiceArgsFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive3'


class FindManyRecurringInvoiceArgsFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive4'


class FindManyRecurringInvoiceArgsFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    
    

class MessageIncludeFromRecurringInvoice(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromRecurringInvoiceRecursive1']


class MessageIncludeFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromRecurringInvoiceRecursive2']


class MessageIncludeFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromRecurringInvoiceRecursive3']


class MessageIncludeFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromRecurringInvoiceRecursive4']


class MessageIncludeFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""

    

class MessageArgsFromRecurringInvoice(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    
    

class FindManyMessageArgsFromRecurringInvoice(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class RepeatRuleIncludeFromRecurringInvoice(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    message: Union[bool, 'MessageArgsFromRecurringInvoiceRecursive1']


class RepeatRuleIncludeFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    message: Union[bool, 'MessageArgsFromRecurringInvoiceRecursive2']


class RepeatRuleIncludeFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    message: Union[bool, 'MessageArgsFromRecurringInvoiceRecursive3']


class RepeatRuleIncludeFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""
    message: Union[bool, 'MessageArgsFromRecurringInvoiceRecursive4']


class RepeatRuleIncludeFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Relational arguments for RecurringInvoice"""

    

class RepeatRuleArgsFromRecurringInvoice(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive1'


class RepeatRuleArgsFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive2'


class RepeatRuleArgsFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive3'


class RepeatRuleArgsFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive4'


class RepeatRuleArgsFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    
    

class FindManyRepeatRuleArgsFromRecurringInvoice(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive1'


class FindManyRepeatRuleArgsFromRecurringInvoiceRecursive1(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive2'


class FindManyRepeatRuleArgsFromRecurringInvoiceRecursive2(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive3'


class FindManyRepeatRuleArgsFromRecurringInvoiceRecursive3(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive4'


class FindManyRepeatRuleArgsFromRecurringInvoiceRecursive4(TypedDict, total=False):
    """Arguments for RecurringInvoice"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    


FindManyRecurringInvoiceArgs = FindManyRecurringInvoiceArgsFromRecurringInvoice
FindFirstRecurringInvoiceArgs = FindManyRecurringInvoiceArgsFromRecurringInvoice


    

class RecurringInvoiceWhereInput(TypedDict, total=False):
    """RecurringInvoice arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    invoiceId: Union[_str, 'types.StringFilter']
    invoice: 'InvoiceRelationFilter'
    frequency: Union[_str, 'types.StringFilter']
    nextRun: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['RecurringInvoiceWhereInputRecursive1', List['RecurringInvoiceWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['RecurringInvoiceWhereInputRecursive1']
    OR: List['RecurringInvoiceWhereInputRecursive1']
    NOT: List['RecurringInvoiceWhereInputRecursive1']


class RecurringInvoiceWhereInputRecursive1(TypedDict, total=False):
    """RecurringInvoice arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    invoiceId: Union[_str, 'types.StringFilter']
    invoice: 'InvoiceRelationFilter'
    frequency: Union[_str, 'types.StringFilter']
    nextRun: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['RecurringInvoiceWhereInputRecursive2', List['RecurringInvoiceWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['RecurringInvoiceWhereInputRecursive2']
    OR: List['RecurringInvoiceWhereInputRecursive2']
    NOT: List['RecurringInvoiceWhereInputRecursive2']


class RecurringInvoiceWhereInputRecursive2(TypedDict, total=False):
    """RecurringInvoice arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    invoiceId: Union[_str, 'types.StringFilter']
    invoice: 'InvoiceRelationFilter'
    frequency: Union[_str, 'types.StringFilter']
    nextRun: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['RecurringInvoiceWhereInputRecursive3', List['RecurringInvoiceWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['RecurringInvoiceWhereInputRecursive3']
    OR: List['RecurringInvoiceWhereInputRecursive3']
    NOT: List['RecurringInvoiceWhereInputRecursive3']


class RecurringInvoiceWhereInputRecursive3(TypedDict, total=False):
    """RecurringInvoice arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    invoiceId: Union[_str, 'types.StringFilter']
    invoice: 'InvoiceRelationFilter'
    frequency: Union[_str, 'types.StringFilter']
    nextRun: Union[datetime.datetime, 'types.DateTimeFilter']

    # should be noted that AND and NOT should be Union['RecurringInvoiceWhereInputRecursive4', List['RecurringInvoiceWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['RecurringInvoiceWhereInputRecursive4']
    OR: List['RecurringInvoiceWhereInputRecursive4']
    NOT: List['RecurringInvoiceWhereInputRecursive4']


class RecurringInvoiceWhereInputRecursive4(TypedDict, total=False):
    """RecurringInvoice arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    invoiceId: Union[_str, 'types.StringFilter']
    invoice: 'InvoiceRelationFilter'
    frequency: Union[_str, 'types.StringFilter']
    nextRun: Union[datetime.datetime, 'types.DateTimeFilter']



# aggregate RecurringInvoice types


    

class RecurringInvoiceScalarWhereWithAggregatesInput(TypedDict, total=False):
    """RecurringInvoice arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceId: Union[_str, 'types.StringWithAggregatesFilter']
    frequency: Union[_str, 'types.StringWithAggregatesFilter']
    nextRun: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RecurringInvoiceScalarWhereWithAggregatesInputRecursive1']
    OR: List['RecurringInvoiceScalarWhereWithAggregatesInputRecursive1']
    NOT: List['RecurringInvoiceScalarWhereWithAggregatesInputRecursive1']


class RecurringInvoiceScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """RecurringInvoice arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceId: Union[_str, 'types.StringWithAggregatesFilter']
    frequency: Union[_str, 'types.StringWithAggregatesFilter']
    nextRun: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RecurringInvoiceScalarWhereWithAggregatesInputRecursive2']
    OR: List['RecurringInvoiceScalarWhereWithAggregatesInputRecursive2']
    NOT: List['RecurringInvoiceScalarWhereWithAggregatesInputRecursive2']


class RecurringInvoiceScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """RecurringInvoice arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceId: Union[_str, 'types.StringWithAggregatesFilter']
    frequency: Union[_str, 'types.StringWithAggregatesFilter']
    nextRun: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RecurringInvoiceScalarWhereWithAggregatesInputRecursive3']
    OR: List['RecurringInvoiceScalarWhereWithAggregatesInputRecursive3']
    NOT: List['RecurringInvoiceScalarWhereWithAggregatesInputRecursive3']


class RecurringInvoiceScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """RecurringInvoice arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceId: Union[_str, 'types.StringWithAggregatesFilter']
    frequency: Union[_str, 'types.StringWithAggregatesFilter']
    nextRun: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['RecurringInvoiceScalarWhereWithAggregatesInputRecursive4']
    OR: List['RecurringInvoiceScalarWhereWithAggregatesInputRecursive4']
    NOT: List['RecurringInvoiceScalarWhereWithAggregatesInputRecursive4']


class RecurringInvoiceScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """RecurringInvoice arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    invoiceId: Union[_str, 'types.StringWithAggregatesFilter']
    frequency: Union[_str, 'types.StringWithAggregatesFilter']
    nextRun: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class RecurringInvoiceGroupByOutput(TypedDict, total=False):
    id: _str
    invoiceId: _str
    frequency: _str
    nextRun: datetime.datetime
    _sum: 'RecurringInvoiceSumAggregateOutput'
    _avg: 'RecurringInvoiceAvgAggregateOutput'
    _min: 'RecurringInvoiceMinAggregateOutput'
    _max: 'RecurringInvoiceMaxAggregateOutput'
    _count: 'RecurringInvoiceCountAggregateOutput'


class RecurringInvoiceAvgAggregateOutput(TypedDict, total=False):
    """RecurringInvoice output for aggregating averages"""


class RecurringInvoiceSumAggregateOutput(TypedDict, total=False):
    """RecurringInvoice output for aggregating sums"""


class RecurringInvoiceScalarAggregateOutput(TypedDict, total=False):
    """RecurringInvoice output including scalar fields"""
    id: _str
    invoiceId: _str
    frequency: _str
    nextRun: datetime.datetime


RecurringInvoiceMinAggregateOutput = RecurringInvoiceScalarAggregateOutput
RecurringInvoiceMaxAggregateOutput = RecurringInvoiceScalarAggregateOutput


class RecurringInvoiceMaxAggregateInput(TypedDict, total=False):
    """RecurringInvoice input for aggregating by max"""
    id: bool
    invoiceId: bool
    frequency: bool
    nextRun: bool


class RecurringInvoiceMinAggregateInput(TypedDict, total=False):
    """RecurringInvoice input for aggregating by min"""
    id: bool
    invoiceId: bool
    frequency: bool
    nextRun: bool


class RecurringInvoiceNumberAggregateInput(TypedDict, total=False):
    """RecurringInvoice input for aggregating numbers"""


RecurringInvoiceAvgAggregateInput = RecurringInvoiceNumberAggregateInput
RecurringInvoiceSumAggregateInput = RecurringInvoiceNumberAggregateInput


RecurringInvoiceCountAggregateInput = TypedDict(
    'RecurringInvoiceCountAggregateInput',
    {
        'id': bool,
        'invoiceId': bool,
        'frequency': bool,
        'nextRun': bool,
        '_all': bool,
    },
    total=False,
)

RecurringInvoiceCountAggregateOutput = TypedDict(
    'RecurringInvoiceCountAggregateOutput',
    {
        'id': int,
        'invoiceId': int,
        'frequency': int,
        'nextRun': int,
        '_all': int,
    },
    total=False,
)


RecurringInvoiceKeys = Literal[
    'id',
    'invoiceId',
    'invoice',
    'frequency',
    'nextRun',
]
RecurringInvoiceScalarFieldKeys = Literal[
    'id',
    'invoiceId',
    'frequency',
    'nextRun',
]
RecurringInvoiceScalarFieldKeysT = TypeVar('RecurringInvoiceScalarFieldKeysT', bound=RecurringInvoiceScalarFieldKeys)

RecurringInvoiceRelationalFieldKeys = Literal[
        'invoice',
    ]

# Message types

class MessageOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the Message create method"""
    id: _str
    sentAt: datetime.datetime
    repeatRule: 'RepeatRuleCreateNestedWithoutRelationsInput'


class MessageCreateInput(MessageOptionalCreateInput):
    """Required arguments to the Message create method"""
    subject: _str
    content: _str
    fromEmail: _str
    toEmail: _str


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class MessageOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the Message create method, without relations"""
    id: _str
    sentAt: datetime.datetime


class MessageCreateWithoutRelationsInput(MessageOptionalCreateWithoutRelationsInput):
    """Required arguments to the Message create method, without relations"""
    subject: _str
    content: _str
    fromEmail: _str
    toEmail: _str

class MessageConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'MessageCreateWithoutRelationsInput'
    where: 'MessageWhereUniqueInput'

class MessageCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'MessageCreateWithoutRelationsInput'
    connect: 'MessageWhereUniqueInput'
    connect_or_create: 'MessageConnectOrCreateWithoutRelationsInput'


class MessageCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['MessageCreateWithoutRelationsInput', List['MessageCreateWithoutRelationsInput']]
    connect: Union['MessageWhereUniqueInput', List['MessageWhereUniqueInput']]
    connect_or_create: Union['MessageConnectOrCreateWithoutRelationsInput', List['MessageConnectOrCreateWithoutRelationsInput']]

_MessageWhereUnique_id_Input = TypedDict(
    '_MessageWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

MessageWhereUniqueInput = _MessageWhereUnique_id_Input


class MessageUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    subject: _str
    content: _str
    fromEmail: _str
    toEmail: _str
    sentAt: datetime.datetime
    repeatRule: 'RepeatRuleUpdateOneWithoutRelationsInput'


class MessageUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    subject: _str
    content: _str
    fromEmail: _str
    toEmail: _str
    sentAt: datetime.datetime


class MessageUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['MessageCreateWithoutRelationsInput']
    connect: List['MessageWhereUniqueInput']
    connect_or_create: List['MessageConnectOrCreateWithoutRelationsInput']
    set: List['MessageWhereUniqueInput']
    disconnect: List['MessageWhereUniqueInput']
    delete: List['MessageWhereUniqueInput']

    # TODO
    # update: List['MessageUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['MessageUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['MessageScalarWhereInput']
    # upsert: List['MessageUpserteWithWhereUniqueWithoutRelationsInput']


class MessageUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'MessageCreateWithoutRelationsInput'
    connect: 'MessageWhereUniqueInput'
    connect_or_create: 'MessageConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'MessageUpdateInput'
    # upsert: 'MessageUpsertWithoutRelationsInput'


class MessageUpsertInput(TypedDict):
    create: 'MessageCreateInput'
    update: 'MessageUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_Message_id_OrderByInput = TypedDict(
    '_Message_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_Message_subject_OrderByInput = TypedDict(
    '_Message_subject_OrderByInput',
    {
        'subject': 'SortOrder',
    },
    total=True
)

_Message_content_OrderByInput = TypedDict(
    '_Message_content_OrderByInput',
    {
        'content': 'SortOrder',
    },
    total=True
)

_Message_fromEmail_OrderByInput = TypedDict(
    '_Message_fromEmail_OrderByInput',
    {
        'fromEmail': 'SortOrder',
    },
    total=True
)

_Message_toEmail_OrderByInput = TypedDict(
    '_Message_toEmail_OrderByInput',
    {
        'toEmail': 'SortOrder',
    },
    total=True
)

_Message_sentAt_OrderByInput = TypedDict(
    '_Message_sentAt_OrderByInput',
    {
        'sentAt': 'SortOrder',
    },
    total=True
)

_Message_RelevanceInner = TypedDict(
    '_Message_RelevanceInner',
    {
        'fields': 'List[MessageScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_Message_RelevanceOrderByInput = TypedDict(
    '_Message_RelevanceOrderByInput',
    {
        '_relevance': '_Message_RelevanceInner',
    },
    total=True
)

MessageOrderByInput = Union[
    '_Message_id_OrderByInput',
    '_Message_subject_OrderByInput',
    '_Message_content_OrderByInput',
    '_Message_fromEmail_OrderByInput',
    '_Message_toEmail_OrderByInput',
    '_Message_sentAt_OrderByInput',
    '_Message_RelevanceOrderByInput',
]



# recursive Message types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

MessageRelationFilter = TypedDict(
    'MessageRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class MessageListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class MessageInclude(TypedDict, total=False):
    """Message relational arguments"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromMessage']


    

class UserIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromMessageRecursive1']


class UserIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromMessageRecursive2']


class UserIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromMessageRecursive3']


class UserIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromMessageRecursive4']


class UserIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class UserArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyUserArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class InvoiceIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    client: Union[bool, 'UserArgsFromMessageRecursive1']
    recurring: Union[bool, 'RecurringInvoiceArgsFromMessageRecursive1']
    services: Union[bool, 'FindManyServiceArgsFromMessageRecursive1']


class InvoiceIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    client: Union[bool, 'UserArgsFromMessageRecursive2']
    recurring: Union[bool, 'RecurringInvoiceArgsFromMessageRecursive2']
    services: Union[bool, 'FindManyServiceArgsFromMessageRecursive2']


class InvoiceIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    client: Union[bool, 'UserArgsFromMessageRecursive3']
    recurring: Union[bool, 'RecurringInvoiceArgsFromMessageRecursive3']
    services: Union[bool, 'FindManyServiceArgsFromMessageRecursive3']


class InvoiceIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    client: Union[bool, 'UserArgsFromMessageRecursive4']
    recurring: Union[bool, 'RecurringInvoiceArgsFromMessageRecursive4']
    services: Union[bool, 'FindManyServiceArgsFromMessageRecursive4']


class InvoiceIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class InvoiceArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'InvoiceIncludeFromInvoiceRecursive1'


class InvoiceArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'InvoiceIncludeFromInvoiceRecursive2'


class InvoiceArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'InvoiceIncludeFromInvoiceRecursive3'


class InvoiceArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'InvoiceIncludeFromInvoiceRecursive4'


class InvoiceArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyInvoiceArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive1'


class FindManyInvoiceArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive2'


class FindManyInvoiceArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive3'


class FindManyInvoiceArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive4'


class FindManyInvoiceArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    
    

class ServiceIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    invoice: Union[bool, 'InvoiceArgsFromMessageRecursive1']


class ServiceIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    invoice: Union[bool, 'InvoiceArgsFromMessageRecursive2']


class ServiceIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    invoice: Union[bool, 'InvoiceArgsFromMessageRecursive3']


class ServiceIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    invoice: Union[bool, 'InvoiceArgsFromMessageRecursive4']


class ServiceIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class ServiceArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyServiceArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class RecurringInvoiceIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    invoice: Union[bool, 'InvoiceArgsFromMessageRecursive1']


class RecurringInvoiceIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    invoice: Union[bool, 'InvoiceArgsFromMessageRecursive2']


class RecurringInvoiceIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    invoice: Union[bool, 'InvoiceArgsFromMessageRecursive3']


class RecurringInvoiceIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    invoice: Union[bool, 'InvoiceArgsFromMessageRecursive4']


class RecurringInvoiceIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class RecurringInvoiceArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive1'


class RecurringInvoiceArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive2'


class RecurringInvoiceArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive3'


class RecurringInvoiceArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive4'


class RecurringInvoiceArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyRecurringInvoiceArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive1'


class FindManyRecurringInvoiceArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive2'


class FindManyRecurringInvoiceArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive3'


class FindManyRecurringInvoiceArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive4'


class FindManyRecurringInvoiceArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    
    

class MessageIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromMessageRecursive1']


class MessageIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromMessageRecursive2']


class MessageIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromMessageRecursive3']


class MessageIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromMessageRecursive4']


class MessageIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class MessageArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyMessageArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class RepeatRuleIncludeFromMessage(TypedDict, total=False):
    """Relational arguments for Message"""
    message: Union[bool, 'MessageArgsFromMessageRecursive1']


class RepeatRuleIncludeFromMessageRecursive1(TypedDict, total=False):
    """Relational arguments for Message"""
    message: Union[bool, 'MessageArgsFromMessageRecursive2']


class RepeatRuleIncludeFromMessageRecursive2(TypedDict, total=False):
    """Relational arguments for Message"""
    message: Union[bool, 'MessageArgsFromMessageRecursive3']


class RepeatRuleIncludeFromMessageRecursive3(TypedDict, total=False):
    """Relational arguments for Message"""
    message: Union[bool, 'MessageArgsFromMessageRecursive4']


class RepeatRuleIncludeFromMessageRecursive4(TypedDict, total=False):
    """Relational arguments for Message"""

    

class RepeatRuleArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive1'


class RepeatRuleArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive2'


class RepeatRuleArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive3'


class RepeatRuleArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive4'


class RepeatRuleArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    
    

class FindManyRepeatRuleArgsFromMessage(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive1'


class FindManyRepeatRuleArgsFromMessageRecursive1(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive2'


class FindManyRepeatRuleArgsFromMessageRecursive2(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive3'


class FindManyRepeatRuleArgsFromMessageRecursive3(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive4'


class FindManyRepeatRuleArgsFromMessageRecursive4(TypedDict, total=False):
    """Arguments for Message"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    


FindManyMessageArgs = FindManyMessageArgsFromMessage
FindFirstMessageArgs = FindManyMessageArgsFromMessage


    

class MessageWhereInput(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    subject: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    fromEmail: Union[_str, 'types.StringFilter']
    toEmail: Union[_str, 'types.StringFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeFilter']
    repeatRule: 'RepeatRuleRelationFilter'

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive1', List['MessageWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive1']
    OR: List['MessageWhereInputRecursive1']
    NOT: List['MessageWhereInputRecursive1']


class MessageWhereInputRecursive1(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    subject: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    fromEmail: Union[_str, 'types.StringFilter']
    toEmail: Union[_str, 'types.StringFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeFilter']
    repeatRule: 'RepeatRuleRelationFilter'

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive2', List['MessageWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive2']
    OR: List['MessageWhereInputRecursive2']
    NOT: List['MessageWhereInputRecursive2']


class MessageWhereInputRecursive2(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    subject: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    fromEmail: Union[_str, 'types.StringFilter']
    toEmail: Union[_str, 'types.StringFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeFilter']
    repeatRule: 'RepeatRuleRelationFilter'

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive3', List['MessageWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive3']
    OR: List['MessageWhereInputRecursive3']
    NOT: List['MessageWhereInputRecursive3']


class MessageWhereInputRecursive3(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    subject: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    fromEmail: Union[_str, 'types.StringFilter']
    toEmail: Union[_str, 'types.StringFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeFilter']
    repeatRule: 'RepeatRuleRelationFilter'

    # should be noted that AND and NOT should be Union['MessageWhereInputRecursive4', List['MessageWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['MessageWhereInputRecursive4']
    OR: List['MessageWhereInputRecursive4']
    NOT: List['MessageWhereInputRecursive4']


class MessageWhereInputRecursive4(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    subject: Union[_str, 'types.StringFilter']
    content: Union[_str, 'types.StringFilter']
    fromEmail: Union[_str, 'types.StringFilter']
    toEmail: Union[_str, 'types.StringFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeFilter']
    repeatRule: 'RepeatRuleRelationFilter'



# aggregate Message types


    

class MessageScalarWhereWithAggregatesInput(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    subject: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    fromEmail: Union[_str, 'types.StringWithAggregatesFilter']
    toEmail: Union[_str, 'types.StringWithAggregatesFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive1']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive1']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive1']


class MessageScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    subject: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    fromEmail: Union[_str, 'types.StringWithAggregatesFilter']
    toEmail: Union[_str, 'types.StringWithAggregatesFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive2']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive2']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive2']


class MessageScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    subject: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    fromEmail: Union[_str, 'types.StringWithAggregatesFilter']
    toEmail: Union[_str, 'types.StringWithAggregatesFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive3']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive3']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive3']


class MessageScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    subject: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    fromEmail: Union[_str, 'types.StringWithAggregatesFilter']
    toEmail: Union[_str, 'types.StringWithAggregatesFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']

    AND: List['MessageScalarWhereWithAggregatesInputRecursive4']
    OR: List['MessageScalarWhereWithAggregatesInputRecursive4']
    NOT: List['MessageScalarWhereWithAggregatesInputRecursive4']


class MessageScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """Message arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    subject: Union[_str, 'types.StringWithAggregatesFilter']
    content: Union[_str, 'types.StringWithAggregatesFilter']
    fromEmail: Union[_str, 'types.StringWithAggregatesFilter']
    toEmail: Union[_str, 'types.StringWithAggregatesFilter']
    sentAt: Union[datetime.datetime, 'types.DateTimeWithAggregatesFilter']



class MessageGroupByOutput(TypedDict, total=False):
    id: _str
    subject: _str
    content: _str
    fromEmail: _str
    toEmail: _str
    sentAt: datetime.datetime
    _sum: 'MessageSumAggregateOutput'
    _avg: 'MessageAvgAggregateOutput'
    _min: 'MessageMinAggregateOutput'
    _max: 'MessageMaxAggregateOutput'
    _count: 'MessageCountAggregateOutput'


class MessageAvgAggregateOutput(TypedDict, total=False):
    """Message output for aggregating averages"""


class MessageSumAggregateOutput(TypedDict, total=False):
    """Message output for aggregating sums"""


class MessageScalarAggregateOutput(TypedDict, total=False):
    """Message output including scalar fields"""
    id: _str
    subject: _str
    content: _str
    fromEmail: _str
    toEmail: _str
    sentAt: datetime.datetime


MessageMinAggregateOutput = MessageScalarAggregateOutput
MessageMaxAggregateOutput = MessageScalarAggregateOutput


class MessageMaxAggregateInput(TypedDict, total=False):
    """Message input for aggregating by max"""
    id: bool
    subject: bool
    content: bool
    fromEmail: bool
    toEmail: bool
    sentAt: bool


class MessageMinAggregateInput(TypedDict, total=False):
    """Message input for aggregating by min"""
    id: bool
    subject: bool
    content: bool
    fromEmail: bool
    toEmail: bool
    sentAt: bool


class MessageNumberAggregateInput(TypedDict, total=False):
    """Message input for aggregating numbers"""


MessageAvgAggregateInput = MessageNumberAggregateInput
MessageSumAggregateInput = MessageNumberAggregateInput


MessageCountAggregateInput = TypedDict(
    'MessageCountAggregateInput',
    {
        'id': bool,
        'subject': bool,
        'content': bool,
        'fromEmail': bool,
        'toEmail': bool,
        'sentAt': bool,
        '_all': bool,
    },
    total=False,
)

MessageCountAggregateOutput = TypedDict(
    'MessageCountAggregateOutput',
    {
        'id': int,
        'subject': int,
        'content': int,
        'fromEmail': int,
        'toEmail': int,
        'sentAt': int,
        '_all': int,
    },
    total=False,
)


MessageKeys = Literal[
    'id',
    'subject',
    'content',
    'fromEmail',
    'toEmail',
    'sentAt',
    'repeatRule',
]
MessageScalarFieldKeys = Literal[
    'id',
    'subject',
    'content',
    'fromEmail',
    'toEmail',
    'sentAt',
]
MessageScalarFieldKeysT = TypeVar('MessageScalarFieldKeysT', bound=MessageScalarFieldKeys)

MessageRelationalFieldKeys = Literal[
        'repeatRule',
    ]

# RepeatRule types

class RepeatRuleOptionalCreateInput(TypedDict, total=False):
    """Optional arguments to the RepeatRule create method"""
    id: _str
    messageId: _str
    message: 'MessageCreateNestedWithoutRelationsInput'


class RepeatRuleCreateInput(RepeatRuleOptionalCreateInput):
    """Required arguments to the RepeatRule create method"""
    frequency: 'enums.Frequency'


# TODO: remove this in favour of without explicit relations
# e.g. PostCreateWithoutAuthorInput

class RepeatRuleOptionalCreateWithoutRelationsInput(TypedDict, total=False):
    """Optional arguments to the RepeatRule create method, without relations"""
    id: _str
    messageId: _str


class RepeatRuleCreateWithoutRelationsInput(RepeatRuleOptionalCreateWithoutRelationsInput):
    """Required arguments to the RepeatRule create method, without relations"""
    frequency: 'enums.Frequency'

class RepeatRuleConnectOrCreateWithoutRelationsInput(TypedDict):
    create: 'RepeatRuleCreateWithoutRelationsInput'
    where: 'RepeatRuleWhereUniqueInput'

class RepeatRuleCreateNestedWithoutRelationsInput(TypedDict, total=False):
    create: 'RepeatRuleCreateWithoutRelationsInput'
    connect: 'RepeatRuleWhereUniqueInput'
    connect_or_create: 'RepeatRuleConnectOrCreateWithoutRelationsInput'


class RepeatRuleCreateManyNestedWithoutRelationsInput(TypedDict, total=False):
    create: Union['RepeatRuleCreateWithoutRelationsInput', List['RepeatRuleCreateWithoutRelationsInput']]
    connect: Union['RepeatRuleWhereUniqueInput', List['RepeatRuleWhereUniqueInput']]
    connect_or_create: Union['RepeatRuleConnectOrCreateWithoutRelationsInput', List['RepeatRuleConnectOrCreateWithoutRelationsInput']]

_RepeatRuleWhereUnique_id_Input = TypedDict(
    '_RepeatRuleWhereUnique_id_Input',
    {
        'id': '_str',
    },
    total=True
)

_RepeatRuleWhereUnique_messageId_Input = TypedDict(
    '_RepeatRuleWhereUnique_messageId_Input',
    {
        'messageId': '_str',
    },
    total=True
)

RepeatRuleWhereUniqueInput = Union[
    '_RepeatRuleWhereUnique_id_Input',
    '_RepeatRuleWhereUnique_messageId_Input',
]


class RepeatRuleUpdateInput(TypedDict, total=False):
    """Optional arguments for updating a record"""
    id: _str
    frequency: 'enums.Frequency'
    message: 'MessageUpdateOneWithoutRelationsInput'


class RepeatRuleUpdateManyMutationInput(TypedDict, total=False):
    """Arguments for updating many records"""
    id: _str
    frequency: 'enums.Frequency'


class RepeatRuleUpdateManyWithoutRelationsInput(TypedDict, total=False):
    create: List['RepeatRuleCreateWithoutRelationsInput']
    connect: List['RepeatRuleWhereUniqueInput']
    connect_or_create: List['RepeatRuleConnectOrCreateWithoutRelationsInput']
    set: List['RepeatRuleWhereUniqueInput']
    disconnect: List['RepeatRuleWhereUniqueInput']
    delete: List['RepeatRuleWhereUniqueInput']

    # TODO
    # update: List['RepeatRuleUpdateWithWhereUniqueWithoutRelationsInput']
    # updateMany: List['RepeatRuleUpdateManyWithWhereUniqueWithoutRelationsInput']
    # deleteMany: List['RepeatRuleScalarWhereInput']
    # upsert: List['RepeatRuleUpserteWithWhereUniqueWithoutRelationsInput']


class RepeatRuleUpdateOneWithoutRelationsInput(TypedDict, total=False):
    create: 'RepeatRuleCreateWithoutRelationsInput'
    connect: 'RepeatRuleWhereUniqueInput'
    connect_or_create: 'RepeatRuleConnectOrCreateWithoutRelationsInput'
    disconnect: bool
    delete: bool

    # TODO
    # update: 'RepeatRuleUpdateInput'
    # upsert: 'RepeatRuleUpsertWithoutRelationsInput'


class RepeatRuleUpsertInput(TypedDict):
    create: 'RepeatRuleCreateInput'
    update: 'RepeatRuleUpdateInput'  # pyright: ignore[reportIncompatibleMethodOverride]


_RepeatRule_id_OrderByInput = TypedDict(
    '_RepeatRule_id_OrderByInput',
    {
        'id': 'SortOrder',
    },
    total=True
)

_RepeatRule_frequency_OrderByInput = TypedDict(
    '_RepeatRule_frequency_OrderByInput',
    {
        'frequency': 'SortOrder',
    },
    total=True
)

_RepeatRule_messageId_OrderByInput = TypedDict(
    '_RepeatRule_messageId_OrderByInput',
    {
        'messageId': 'SortOrder',
    },
    total=True
)

_RepeatRule_RelevanceInner = TypedDict(
    '_RepeatRule_RelevanceInner',
    {
        'fields': 'List[RepeatRuleScalarFieldKeys]',
        'search': 'str',
        'sort': 'SortOrder',
    },
    total=True
)

_RepeatRule_RelevanceOrderByInput = TypedDict(
    '_RepeatRule_RelevanceOrderByInput',
    {
        '_relevance': '_RepeatRule_RelevanceInner',
    },
    total=True
)

RepeatRuleOrderByInput = Union[
    '_RepeatRule_id_OrderByInput',
    '_RepeatRule_frequency_OrderByInput',
    '_RepeatRule_messageId_OrderByInput',
    '_RepeatRule_RelevanceOrderByInput',
]



# recursive RepeatRule types
# TODO: cleanup these types


# Dict[str, Any] is a mypy limitation
# see https://github.com/RobertCraigie/prisma-client-py/issues/45
# switch to pyright for improved types, see https://prisma-client-py.readthedocs.io/en/stable/reference/limitations/

RepeatRuleRelationFilter = TypedDict(
    'RepeatRuleRelationFilter',
    {
        'is': 'Dict[str, Any]',
        'is_not': 'Dict[str, Any]',
    },
    total=False,
)


class RepeatRuleListRelationFilter(TypedDict, total=False):
    some: 'Dict[str, Any]'
    none: 'Dict[str, Any]'
    every: 'Dict[str, Any]'


class RepeatRuleInclude(TypedDict, total=False):
    """RepeatRule relational arguments"""
    message: Union[bool, 'MessageArgsFromRepeatRule']


    

class UserIncludeFromRepeatRule(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromRepeatRuleRecursive1']


class UserIncludeFromRepeatRuleRecursive1(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromRepeatRuleRecursive2']


class UserIncludeFromRepeatRuleRecursive2(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromRepeatRuleRecursive3']


class UserIncludeFromRepeatRuleRecursive3(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    invoices: Union[bool, 'FindManyInvoiceArgsFromRepeatRuleRecursive4']


class UserIncludeFromRepeatRuleRecursive4(TypedDict, total=False):
    """Relational arguments for RepeatRule"""

    

class UserArgsFromRepeatRule(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'UserIncludeFromUserRecursive1'


class UserArgsFromRepeatRuleRecursive1(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'UserIncludeFromUserRecursive2'


class UserArgsFromRepeatRuleRecursive2(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'UserIncludeFromUserRecursive3'


class UserArgsFromRepeatRuleRecursive3(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'UserIncludeFromUserRecursive4'


class UserArgsFromRepeatRuleRecursive4(TypedDict, total=False):
    """Arguments for RepeatRule"""
    
    

class FindManyUserArgsFromRepeatRule(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive1'


class FindManyUserArgsFromRepeatRuleRecursive1(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive2'


class FindManyUserArgsFromRepeatRuleRecursive2(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive3'


class FindManyUserArgsFromRepeatRuleRecursive3(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    include: 'UserIncludeFromUserRecursive4'


class FindManyUserArgsFromRepeatRuleRecursive4(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['UserOrderByInput', List['UserOrderByInput']]
    where: 'UserWhereInput'
    cursor: 'UserWhereUniqueInput'
    distinct: List['UserScalarFieldKeys']
    
    

class InvoiceIncludeFromRepeatRule(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    client: Union[bool, 'UserArgsFromRepeatRuleRecursive1']
    recurring: Union[bool, 'RecurringInvoiceArgsFromRepeatRuleRecursive1']
    services: Union[bool, 'FindManyServiceArgsFromRepeatRuleRecursive1']


class InvoiceIncludeFromRepeatRuleRecursive1(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    client: Union[bool, 'UserArgsFromRepeatRuleRecursive2']
    recurring: Union[bool, 'RecurringInvoiceArgsFromRepeatRuleRecursive2']
    services: Union[bool, 'FindManyServiceArgsFromRepeatRuleRecursive2']


class InvoiceIncludeFromRepeatRuleRecursive2(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    client: Union[bool, 'UserArgsFromRepeatRuleRecursive3']
    recurring: Union[bool, 'RecurringInvoiceArgsFromRepeatRuleRecursive3']
    services: Union[bool, 'FindManyServiceArgsFromRepeatRuleRecursive3']


class InvoiceIncludeFromRepeatRuleRecursive3(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    client: Union[bool, 'UserArgsFromRepeatRuleRecursive4']
    recurring: Union[bool, 'RecurringInvoiceArgsFromRepeatRuleRecursive4']
    services: Union[bool, 'FindManyServiceArgsFromRepeatRuleRecursive4']


class InvoiceIncludeFromRepeatRuleRecursive4(TypedDict, total=False):
    """Relational arguments for RepeatRule"""

    

class InvoiceArgsFromRepeatRule(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'InvoiceIncludeFromInvoiceRecursive1'


class InvoiceArgsFromRepeatRuleRecursive1(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'InvoiceIncludeFromInvoiceRecursive2'


class InvoiceArgsFromRepeatRuleRecursive2(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'InvoiceIncludeFromInvoiceRecursive3'


class InvoiceArgsFromRepeatRuleRecursive3(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'InvoiceIncludeFromInvoiceRecursive4'


class InvoiceArgsFromRepeatRuleRecursive4(TypedDict, total=False):
    """Arguments for RepeatRule"""
    
    

class FindManyInvoiceArgsFromRepeatRule(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive1'


class FindManyInvoiceArgsFromRepeatRuleRecursive1(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive2'


class FindManyInvoiceArgsFromRepeatRuleRecursive2(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive3'


class FindManyInvoiceArgsFromRepeatRuleRecursive3(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    include: 'InvoiceIncludeFromInvoiceRecursive4'


class FindManyInvoiceArgsFromRepeatRuleRecursive4(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['InvoiceOrderByInput', List['InvoiceOrderByInput']]
    where: 'InvoiceWhereInput'
    cursor: 'InvoiceWhereUniqueInput'
    distinct: List['InvoiceScalarFieldKeys']
    
    

class ServiceIncludeFromRepeatRule(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    invoice: Union[bool, 'InvoiceArgsFromRepeatRuleRecursive1']


class ServiceIncludeFromRepeatRuleRecursive1(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    invoice: Union[bool, 'InvoiceArgsFromRepeatRuleRecursive2']


class ServiceIncludeFromRepeatRuleRecursive2(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    invoice: Union[bool, 'InvoiceArgsFromRepeatRuleRecursive3']


class ServiceIncludeFromRepeatRuleRecursive3(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    invoice: Union[bool, 'InvoiceArgsFromRepeatRuleRecursive4']


class ServiceIncludeFromRepeatRuleRecursive4(TypedDict, total=False):
    """Relational arguments for RepeatRule"""

    

class ServiceArgsFromRepeatRule(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'ServiceIncludeFromServiceRecursive1'


class ServiceArgsFromRepeatRuleRecursive1(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'ServiceIncludeFromServiceRecursive2'


class ServiceArgsFromRepeatRuleRecursive2(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'ServiceIncludeFromServiceRecursive3'


class ServiceArgsFromRepeatRuleRecursive3(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'ServiceIncludeFromServiceRecursive4'


class ServiceArgsFromRepeatRuleRecursive4(TypedDict, total=False):
    """Arguments for RepeatRule"""
    
    

class FindManyServiceArgsFromRepeatRule(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive1'


class FindManyServiceArgsFromRepeatRuleRecursive1(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive2'


class FindManyServiceArgsFromRepeatRuleRecursive2(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive3'


class FindManyServiceArgsFromRepeatRuleRecursive3(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    include: 'ServiceIncludeFromServiceRecursive4'


class FindManyServiceArgsFromRepeatRuleRecursive4(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['ServiceOrderByInput', List['ServiceOrderByInput']]
    where: 'ServiceWhereInput'
    cursor: 'ServiceWhereUniqueInput'
    distinct: List['ServiceScalarFieldKeys']
    
    

class RecurringInvoiceIncludeFromRepeatRule(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    invoice: Union[bool, 'InvoiceArgsFromRepeatRuleRecursive1']


class RecurringInvoiceIncludeFromRepeatRuleRecursive1(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    invoice: Union[bool, 'InvoiceArgsFromRepeatRuleRecursive2']


class RecurringInvoiceIncludeFromRepeatRuleRecursive2(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    invoice: Union[bool, 'InvoiceArgsFromRepeatRuleRecursive3']


class RecurringInvoiceIncludeFromRepeatRuleRecursive3(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    invoice: Union[bool, 'InvoiceArgsFromRepeatRuleRecursive4']


class RecurringInvoiceIncludeFromRepeatRuleRecursive4(TypedDict, total=False):
    """Relational arguments for RepeatRule"""

    

class RecurringInvoiceArgsFromRepeatRule(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive1'


class RecurringInvoiceArgsFromRepeatRuleRecursive1(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive2'


class RecurringInvoiceArgsFromRepeatRuleRecursive2(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive3'


class RecurringInvoiceArgsFromRepeatRuleRecursive3(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive4'


class RecurringInvoiceArgsFromRepeatRuleRecursive4(TypedDict, total=False):
    """Arguments for RepeatRule"""
    
    

class FindManyRecurringInvoiceArgsFromRepeatRule(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive1'


class FindManyRecurringInvoiceArgsFromRepeatRuleRecursive1(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive2'


class FindManyRecurringInvoiceArgsFromRepeatRuleRecursive2(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive3'


class FindManyRecurringInvoiceArgsFromRepeatRuleRecursive3(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    include: 'RecurringInvoiceIncludeFromRecurringInvoiceRecursive4'


class FindManyRecurringInvoiceArgsFromRepeatRuleRecursive4(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['RecurringInvoiceOrderByInput', List['RecurringInvoiceOrderByInput']]
    where: 'RecurringInvoiceWhereInput'
    cursor: 'RecurringInvoiceWhereUniqueInput'
    distinct: List['RecurringInvoiceScalarFieldKeys']
    
    

class MessageIncludeFromRepeatRule(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromRepeatRuleRecursive1']


class MessageIncludeFromRepeatRuleRecursive1(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromRepeatRuleRecursive2']


class MessageIncludeFromRepeatRuleRecursive2(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromRepeatRuleRecursive3']


class MessageIncludeFromRepeatRuleRecursive3(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    repeatRule: Union[bool, 'RepeatRuleArgsFromRepeatRuleRecursive4']


class MessageIncludeFromRepeatRuleRecursive4(TypedDict, total=False):
    """Relational arguments for RepeatRule"""

    

class MessageArgsFromRepeatRule(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'MessageIncludeFromMessageRecursive1'


class MessageArgsFromRepeatRuleRecursive1(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'MessageIncludeFromMessageRecursive2'


class MessageArgsFromRepeatRuleRecursive2(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'MessageIncludeFromMessageRecursive3'


class MessageArgsFromRepeatRuleRecursive3(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'MessageIncludeFromMessageRecursive4'


class MessageArgsFromRepeatRuleRecursive4(TypedDict, total=False):
    """Arguments for RepeatRule"""
    
    

class FindManyMessageArgsFromRepeatRule(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive1'


class FindManyMessageArgsFromRepeatRuleRecursive1(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive2'


class FindManyMessageArgsFromRepeatRuleRecursive2(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive3'


class FindManyMessageArgsFromRepeatRuleRecursive3(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    include: 'MessageIncludeFromMessageRecursive4'


class FindManyMessageArgsFromRepeatRuleRecursive4(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['MessageOrderByInput', List['MessageOrderByInput']]
    where: 'MessageWhereInput'
    cursor: 'MessageWhereUniqueInput'
    distinct: List['MessageScalarFieldKeys']
    
    

class RepeatRuleIncludeFromRepeatRule(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    message: Union[bool, 'MessageArgsFromRepeatRuleRecursive1']


class RepeatRuleIncludeFromRepeatRuleRecursive1(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    message: Union[bool, 'MessageArgsFromRepeatRuleRecursive2']


class RepeatRuleIncludeFromRepeatRuleRecursive2(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    message: Union[bool, 'MessageArgsFromRepeatRuleRecursive3']


class RepeatRuleIncludeFromRepeatRuleRecursive3(TypedDict, total=False):
    """Relational arguments for RepeatRule"""
    message: Union[bool, 'MessageArgsFromRepeatRuleRecursive4']


class RepeatRuleIncludeFromRepeatRuleRecursive4(TypedDict, total=False):
    """Relational arguments for RepeatRule"""

    

class RepeatRuleArgsFromRepeatRule(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive1'


class RepeatRuleArgsFromRepeatRuleRecursive1(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive2'


class RepeatRuleArgsFromRepeatRuleRecursive2(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive3'


class RepeatRuleArgsFromRepeatRuleRecursive3(TypedDict, total=False):
    """Arguments for RepeatRule"""
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive4'


class RepeatRuleArgsFromRepeatRuleRecursive4(TypedDict, total=False):
    """Arguments for RepeatRule"""
    
    

class FindManyRepeatRuleArgsFromRepeatRule(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive1'


class FindManyRepeatRuleArgsFromRepeatRuleRecursive1(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive2'


class FindManyRepeatRuleArgsFromRepeatRuleRecursive2(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive3'


class FindManyRepeatRuleArgsFromRepeatRuleRecursive3(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    include: 'RepeatRuleIncludeFromRepeatRuleRecursive4'


class FindManyRepeatRuleArgsFromRepeatRuleRecursive4(TypedDict, total=False):
    """Arguments for RepeatRule"""
    take: int
    skip: int
    order_by: Union['RepeatRuleOrderByInput', List['RepeatRuleOrderByInput']]
    where: 'RepeatRuleWhereInput'
    cursor: 'RepeatRuleWhereUniqueInput'
    distinct: List['RepeatRuleScalarFieldKeys']
    


FindManyRepeatRuleArgs = FindManyRepeatRuleArgsFromRepeatRule
FindFirstRepeatRuleArgs = FindManyRepeatRuleArgsFromRepeatRule


    

class RepeatRuleWhereInput(TypedDict, total=False):
    """RepeatRule arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    frequency: 'enums.Frequency'
    messageId: Union[_str, 'types.StringFilter']
    message: 'MessageRelationFilter'

    # should be noted that AND and NOT should be Union['RepeatRuleWhereInputRecursive1', List['RepeatRuleWhereInputRecursive1']]
    # but this causes mypy to hang :/
    AND: List['RepeatRuleWhereInputRecursive1']
    OR: List['RepeatRuleWhereInputRecursive1']
    NOT: List['RepeatRuleWhereInputRecursive1']


class RepeatRuleWhereInputRecursive1(TypedDict, total=False):
    """RepeatRule arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    frequency: 'enums.Frequency'
    messageId: Union[_str, 'types.StringFilter']
    message: 'MessageRelationFilter'

    # should be noted that AND and NOT should be Union['RepeatRuleWhereInputRecursive2', List['RepeatRuleWhereInputRecursive2']]
    # but this causes mypy to hang :/
    AND: List['RepeatRuleWhereInputRecursive2']
    OR: List['RepeatRuleWhereInputRecursive2']
    NOT: List['RepeatRuleWhereInputRecursive2']


class RepeatRuleWhereInputRecursive2(TypedDict, total=False):
    """RepeatRule arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    frequency: 'enums.Frequency'
    messageId: Union[_str, 'types.StringFilter']
    message: 'MessageRelationFilter'

    # should be noted that AND and NOT should be Union['RepeatRuleWhereInputRecursive3', List['RepeatRuleWhereInputRecursive3']]
    # but this causes mypy to hang :/
    AND: List['RepeatRuleWhereInputRecursive3']
    OR: List['RepeatRuleWhereInputRecursive3']
    NOT: List['RepeatRuleWhereInputRecursive3']


class RepeatRuleWhereInputRecursive3(TypedDict, total=False):
    """RepeatRule arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    frequency: 'enums.Frequency'
    messageId: Union[_str, 'types.StringFilter']
    message: 'MessageRelationFilter'

    # should be noted that AND and NOT should be Union['RepeatRuleWhereInputRecursive4', List['RepeatRuleWhereInputRecursive4']]
    # but this causes mypy to hang :/
    AND: List['RepeatRuleWhereInputRecursive4']
    OR: List['RepeatRuleWhereInputRecursive4']
    NOT: List['RepeatRuleWhereInputRecursive4']


class RepeatRuleWhereInputRecursive4(TypedDict, total=False):
    """RepeatRule arguments for searching"""
    id: Union[_str, 'types.StringFilter']
    frequency: 'enums.Frequency'
    messageId: Union[_str, 'types.StringFilter']
    message: 'MessageRelationFilter'



# aggregate RepeatRule types


    

class RepeatRuleScalarWhereWithAggregatesInput(TypedDict, total=False):
    """RepeatRule arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    frequency: 'enums.Frequency'
    messageId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RepeatRuleScalarWhereWithAggregatesInputRecursive1']
    OR: List['RepeatRuleScalarWhereWithAggregatesInputRecursive1']
    NOT: List['RepeatRuleScalarWhereWithAggregatesInputRecursive1']


class RepeatRuleScalarWhereWithAggregatesInputRecursive1(TypedDict, total=False):
    """RepeatRule arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    frequency: 'enums.Frequency'
    messageId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RepeatRuleScalarWhereWithAggregatesInputRecursive2']
    OR: List['RepeatRuleScalarWhereWithAggregatesInputRecursive2']
    NOT: List['RepeatRuleScalarWhereWithAggregatesInputRecursive2']


class RepeatRuleScalarWhereWithAggregatesInputRecursive2(TypedDict, total=False):
    """RepeatRule arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    frequency: 'enums.Frequency'
    messageId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RepeatRuleScalarWhereWithAggregatesInputRecursive3']
    OR: List['RepeatRuleScalarWhereWithAggregatesInputRecursive3']
    NOT: List['RepeatRuleScalarWhereWithAggregatesInputRecursive3']


class RepeatRuleScalarWhereWithAggregatesInputRecursive3(TypedDict, total=False):
    """RepeatRule arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    frequency: 'enums.Frequency'
    messageId: Union[_str, 'types.StringWithAggregatesFilter']

    AND: List['RepeatRuleScalarWhereWithAggregatesInputRecursive4']
    OR: List['RepeatRuleScalarWhereWithAggregatesInputRecursive4']
    NOT: List['RepeatRuleScalarWhereWithAggregatesInputRecursive4']


class RepeatRuleScalarWhereWithAggregatesInputRecursive4(TypedDict, total=False):
    """RepeatRule arguments for searching"""
    id: Union[_str, 'types.StringWithAggregatesFilter']
    frequency: 'enums.Frequency'
    messageId: Union[_str, 'types.StringWithAggregatesFilter']



class RepeatRuleGroupByOutput(TypedDict, total=False):
    id: _str
    frequency: 'enums.Frequency'
    messageId: _str
    _sum: 'RepeatRuleSumAggregateOutput'
    _avg: 'RepeatRuleAvgAggregateOutput'
    _min: 'RepeatRuleMinAggregateOutput'
    _max: 'RepeatRuleMaxAggregateOutput'
    _count: 'RepeatRuleCountAggregateOutput'


class RepeatRuleAvgAggregateOutput(TypedDict, total=False):
    """RepeatRule output for aggregating averages"""


class RepeatRuleSumAggregateOutput(TypedDict, total=False):
    """RepeatRule output for aggregating sums"""


class RepeatRuleScalarAggregateOutput(TypedDict, total=False):
    """RepeatRule output including scalar fields"""
    id: _str
    frequency: 'enums.Frequency'
    messageId: _str


RepeatRuleMinAggregateOutput = RepeatRuleScalarAggregateOutput
RepeatRuleMaxAggregateOutput = RepeatRuleScalarAggregateOutput


class RepeatRuleMaxAggregateInput(TypedDict, total=False):
    """RepeatRule input for aggregating by max"""
    id: bool
    frequency: bool
    messageId: bool


class RepeatRuleMinAggregateInput(TypedDict, total=False):
    """RepeatRule input for aggregating by min"""
    id: bool
    frequency: bool
    messageId: bool


class RepeatRuleNumberAggregateInput(TypedDict, total=False):
    """RepeatRule input for aggregating numbers"""


RepeatRuleAvgAggregateInput = RepeatRuleNumberAggregateInput
RepeatRuleSumAggregateInput = RepeatRuleNumberAggregateInput


RepeatRuleCountAggregateInput = TypedDict(
    'RepeatRuleCountAggregateInput',
    {
        'id': bool,
        'frequency': bool,
        'messageId': bool,
        '_all': bool,
    },
    total=False,
)

RepeatRuleCountAggregateOutput = TypedDict(
    'RepeatRuleCountAggregateOutput',
    {
        'id': int,
        'frequency': int,
        'messageId': int,
        '_all': int,
    },
    total=False,
)


RepeatRuleKeys = Literal[
    'id',
    'frequency',
    'messageId',
    'message',
]
RepeatRuleScalarFieldKeys = Literal[
    'id',
    'frequency',
    'messageId',
]
RepeatRuleScalarFieldKeysT = TypeVar('RepeatRuleScalarFieldKeysT', bound=RepeatRuleScalarFieldKeys)

RepeatRuleRelationalFieldKeys = Literal[
        'message',
    ]



# we have to import ourselves as types can be namespaced to types
from . import types, enums, models, fields